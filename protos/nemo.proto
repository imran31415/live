syntax = "proto3";

package protos;

service Nemo {
    // TODO deprecate ById for Private and Public
    rpc GetUserById(Id) returns (User){}
    rpc GetUserByIdPublic(Id) returns (User){}
    rpc GetUserByIdPrivate(Id) returns (User){}
    rpc GetUserByEmail(Email) returns (User){}
    rpc GetUserByZoomAccountId(ZoomAccountId) returns (User){}
    rpc GetOrCreateUserBySubId(SubId) returns (User){}
    rpc GetOrderById(Id) returns (Order){}

    rpc UpdateUserBySubId(User) returns (User) {}
    rpc UpdateUserById(User) returns (User) {}
    rpc UpdateUserZoomDeAuthorized(Id) returns (Empty){}

    rpc GetSessionById(GetSessionByIdRequest) returns (Session) {}
    rpc GetSessionsByUserId(Id)returns (Sessions){}
    rpc GetSessionByUserIdAndZoomMeetingId(GetSessionByUserIdAndZoomMeetingIdRequest) returns (Session){}
    rpc GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId(GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) returns (Session){}
    rpc GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId(GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) returns (Session){}
    rpc GetUpcomingSessionsByUserIdAndDate(SessionsByIdAndDateRequest) returns (Sessions){}
    rpc GetPreviousSessionsByUserIdAndDate(SessionsByIdAndDateRequest) returns (Sessions){}
    rpc GetSessionsByStartDate (SessionsRequest) returns (Sessions) {}
    rpc GetSessionsByStartDateAndTag (SessionsByTagRequest) returns (Sessions) {}
    rpc CreateSession(Session) returns (Session){}
    rpc UpdateSession(Session) returns (Session){}
    rpc DeleteSessionById(GetSessionByIdRequest) returns (Session){}
    rpc DeleteSessionsByZoomMeetingId(DeleteSessionsByZoomMeetingIdRequest) returns (Empty){}
    rpc UpdateSessionsNoZoomSyncByUserId(Id) returns (Empty){}

    // CreateOrder -> creates an initial order and returns order id, and the payment methods Ids
    //  - The Http-api will accept a session_id and amount and will create/obtain a customer via the json web token
    //  - Using the amount and customer, the backend will create an order,, as well as return the available payment methods
    //  - The front end will use this data to create an order
    rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse) {}
    rpc GetOrderByPaymentPlatformOrderId(PaymentPlatformOrderId) returns (Order) {}
    rpc UpdateOrderStatusByOrderId(Order) returns (Order) {}
    rpc GetSucceededOrdersByCustomerId(Id) returns (Orders){}

    // The following are called internally by the backend upon order creation
    rpc GetOrCreateCustomerByUserId(Id) returns (Customer){}
    rpc UpdateOrderPaymentMethodId(UpdateOrderPaymentMethodIdRequest) returns (Order){}

    // front end requests signed url from the backend in order to upload images to.
    // this endpoint only returns the url to upload, and does not create any backend records
    rpc GetSignedImageUploadUrl (SignedImageUploadUrlRequest) returns (SignedImageUploadUrlResponse){}

    // Once the front end has successfully uploaded an image to the signed url, the front end will
    // send the details of the uploaded image so the backend can store the image record and associate it
    // to the user record in the backend
    rpc CreateImage(CreateImageRequest) returns (Image) {}
    rpc UpdateImageStatus(UpdateImageStatusRequest) returns (Image){}
    rpc GetImagesByUserId(Id) returns (Images){}


    rpc GetZoomAppInstallUrl(ZoomAppInstallUrlRequest) returns (ZoomAppInstallUrlResponse) {}
    rpc GetZoomTokenById(Id) returns (ZoomToken){}
    rpc GetZoomTokenByUserId(Id) returns (ZoomToken){}
    rpc UpdateZoomTokenById(ZoomToken) returns (ZoomToken){}
    rpc RefreshZoomToken(Id) returns (ZoomToken){}
    rpc CreateZoomAccessToken(ZoomToken) returns (ZoomToken) {}

    rpc GetStripeAppInstallUrl(StripeAppInstallUrlRequest) returns (StripeAppInstallUrlResponse) {}

    rpc CreateMeetingInZoom(CreateMeetingInZoomRequest) returns (CreateMeetingInZoomResponse) {}
    rpc UpdateMeetingInZoom(UpdateMeetingInZoomRequest) returns (UpdateMeetingInZoomResponse) {}
    rpc DeleteMeetingInZoom(DeleteMeetingInZoomRequest) returns (DeleteMeetingInZoomResponse) {}
    rpc DeleteZoomAccessTokensByUserId(Id) returns (Empty){}
    rpc SyncUsersZoomMeeting(Id) returns (Empty){}
    rpc SyncZoomMeetingIds(SyncZoomMeetingIdsRequest) returns (SyncZoomMeetingIdsResponse){}

    rpc GetUserProfile(Id) returns (UserProfile){}
    rpc GetZoomRedirectSuccessUri(Empty) returns (RedirectUri) {}
}

message SyncZoomMeetingIdsRequest {
    repeated int64 meeting_ids = 1;
    int64 user_id = 2;
}


message SyncZoomMeetingIdsResponse {
    repeated string errs = 1;
    int64 successes = 2;
}

message OptionalBool {
    bool value = 1;
}
message OptionalString {
    string value = 1;
}
message OptionalInt64 {
    int64 value = 1;
}
message Empty {}
message RedirectUri {
    string uri = 1;
}

message SessionsByIdAndDateRequest {
    int64 user_id = 1;
    // unix timestamp
    int64 date = 2;

}

message GetSessionByUserIdAndZoomMeetingIdRequest {
    int64 user_id = 1;
    int64 zoom_id = 2;
}

message GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest {
    int64 user_id = 1;
    int64 zoom_id = 2;
    string raw_payload = 3;
}

message GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest {
    int64 user_id = 1;
    int64 zoom_id = 2;
    string occurrence_id = 3;
}

message ZoomAccountId{
    string id = 1;
}

message CreateMeetingInZoomRequest {
    CreateZoomMeetingFields fields = 1;
    string access_token = 2;
}

message CreateZoomMeetingFields {
    string topic = 1;
    int64 type = 6;
    string start_time = 2;
    string password = 3;
    int64 duration =4;

    message Settings {
        string host_video = 1;
        string participant_video = 2;
        string join_before_host = 3;
        string mute_upon_entry = 4;
        string waiting_room =5;
    }

    Settings settings = 5;

}


message UpdateMeetingInZoomRequest {
    UpdateZoomMeetingFields fields = 1;
    string access_token = 2;
    int64 meeting_id =3;
    // optional
    string occurrence_id = 4;
}

message DeleteMeetingInZoomRequest {
    string access_token = 1;
    int64 meeting_id =2;
    // only meetings that are reoccurring have this so we only want to delete that instance instead of all the meetings with the id.
    string occurrence_id =3;
}

message UpdateZoomMeetingFields {
    string topic = 1;
    string start_time = 2;
    int64 duration =4;
}


message CreateMeetingInZoomResponse {
    int64 id =1;
    string start_url = 2;
    string join_url = 3;
}

message UpdateMeetingInZoomResponse {

}

message DeleteMeetingInZoomResponse {

}

message ZoomAppInstallUrlRequest {
    int64 user_id = 1;
}


message ZoomAppInstallUrlResponse {
    string url = 1;
}

message UserProfile {
    User user = 2;
    ZoomToken zoom_token =3;
}

message StripeAppInstallUrlRequest {
    int64 user_id = 1;
}

message StripeAppInstallUrlResponse {
    string url = 1;
}


// SignedImageUploadUrlRequest
// u, err := getSignedURL(signerUrl, url.Values{“content_type”: {“image/jpg”}, “ext”: {“jpg”}})
message SignedImageUploadUrlRequest {
    enum Ext {
        NONE = 0;
        JPG = 1;
        JPEG = 2;
        GIF = 3;
        PNG = 4;

    }
    Ext ext = 1;
}

message Email {
    string email = 1;
}
message SignedImageUploadUrlResponse {
    string url =1;
}

// CreateImageRequest
// Once the front end has uploaded the image to the signed URL,
// the front end needs to establish that record in the backend against the user_id
message CreateImageRequest{
    string object_id =1;
    int64 user_id =2;
}


enum UploadStatus {
    STARTED = 0;
    SUCCEEDED = 1;
    FAILED = 2;

}

message Image {
    // DB primary key of the uploaded image
    int64 id = 1;

    UploadStatus status = 2;
    // user_id of the user who owns this image
    int64 user_id = 3;
    // only updated once processed by cloud function
    string serving_url = 4;
    string object_id = 5;

}

message Images {
    repeated Image images = 1;
}

message UpdateImageStatusRequest {
    string object_id = 1;
    UploadStatus status =2;
}



message SessionsRequest {
    int64 limit = 1;
    int64 date = 2;
}

message SessionsByTagRequest {
    int64 limit = 1;
    int64 date = 2;
    string tag = 3;
}

message Id {
    int64 id = 1;
}

message GetSessionByIdRequest {
    int64 id = 1;
    int64 user_id = 2;
    string occurrence_id = 3;
}

message DeleteSessionsByZoomMeetingIdRequest {
    int64 zoom_meeting_id = 1;
    int64 user_id = 2;
}

message SubId {
    string id = 1;
}

message PaymentPlatformOrderId {
    string id = 1;
}

// PaymentCard is not stored in our DB it is acquired synchronously within the CreateOrder
// rpc call and returned to the client
message PaymentCard {
    string number = 1;
    string exp_month = 2;
    string exp_year = 3;
    string cvc = 4;
}

message CreateOrderRequest {
    reserved 2;
    reserved "class_id";

    // User to create order from
    // obtained in the http api layer from jwt token
    // This is mapped to a customer which is used in the order
    int64 user_id =1;

    int64 session_id = 5;

    // This is supplied from the front end and used to ensure the
    // session cost we have in our system at the time of the order matches the cost supplied from the front end
    int64 cost = 3;

    // Type of transaction, purchase, donation
    TransactionType transaction_type = 4;
}


message CreateOrderResponse {
    // convenience so the client has the request/response in one object
    CreateOrderRequest request = 1;

    // This is not stored in DB, just returned in synchronously to client
    repeated  PaymentMethodData payment_methods =2;

    // live.db database storage of order
    Order order = 3;

    // not saved to db,  returned to client synchronously
    string client_secret = 4;
}

message UpdateOrderPaymentMethodIdRequest {
    int64 order_id = 1;
    string payment_method_id =2;
}

message User {
    int64 id = 1;
    string first_name = 2;
    string last_name = 3;
    string email = 4;
    string phone = 5;
    string profile_img_url = 6;
    string auth_zero_sub_id = 7;

    string zoom_access_token = 8;
    string zoom_refresh_token = 9;

    string name = 10;
    string description =11;

    string banner_img_url = 12;
    string instagram_url = 13;
    string facebook_url = 14;
    string youtube_channel_url = 15;
    string twitter_url = 16;
    string tags = 17;
    bool zoom_app_installed = 21;
    string zoom_account_id = 25;

    // hydrated fields:
    Sessions upcoming_sessions = 18;
    Sessions previous_sessions = 19;
    Sessions live_sessions = 20;

    Sessions ordered_upcoming_sessions = 22;
    Sessions ordered_previous_sessions = 23;
    Sessions ordered_live_sessions = 24;

}

message Users {
    repeated User users = 1;
}

enum PaymentPlatforms {
    STRIPE = 0;
    // Tadd more payment platforms here
}

// Customer represents a user record that has started a checkout flow and is meant to be payment platform agnostic
// for stripe this gets created when we call `customer.New()` to the stripe API
message Customer {

    // primary key in via.live db
    int64 id = 1;

    // foreign to the user record in via.live db
    int64 user_id =2;


    PaymentPlatforms platform = 3;
    // Id that ties to the platform in which this record exists
    string payment_platform_customer_id = 4;

    // Not strictly required
    string email = 5;
}

message Customers {
    repeated Customer customers = 1;
}


message PaymentMethodData {
    //ID of the mayment method in striped system
    string payment_method_id =1;
    string last_four = 2;
    int64 exp_month = 3;
    int64 exp_year = 4;
    string network = 5;
    string brand =6;

}


enum TransactionType {
    NONE = 0;
    PURCHASE = 1;
    DONATION = 2;
}

// Order represents an intent for a customer to enter into a transaction
// For stripe this gets created when we successfully execute `paymentintent.New(pi_params)`
// This will be stored as a record in via.live db


message Order {
    reserved 5, 12 to 15;
    reserved "class_id", "instructor_id", "instructor_name", "provider_id", "provider_name","class_name", "class_description";

    //unique identifier for via.live db
    int64 id = 1;

    // unique identifier of the customer record in via.live db
    int64 customer_id = 2;

    // the payment provider platform, ex. stripe
    PaymentPlatforms payment_platform = 3;

    // The status of the order:
    enum PaymentPlatformStatus {
        CREATED = 0;
        FAILED = 1;
        // Succeeded means we have charged for this order and this
        // transaction should exist as completed in the payment providers system
        SUCCEEDED = 2;
        ATTACHED = 3;
        PROVIDER_CREATED = 4;
    }

    PaymentPlatformStatus status = 4;

    // Unique identifier of the session in via.live db
    int64 session_id = 19;

    // This is the unique identifier that maps to the payment method used in the order.
    string payment_method_id = 6;

    // The unique identifier for the order in payment providers system,
    // for stripe this is the payment_intent id
    string payment_platform_order_id = 7;

    string payment_platform_customer_id = 8;

    // amount In cents
    // This is the amount that was charged on the order for the given session
    int64 amount = 9;

    TransactionType transaction_type = 18;

    //  The following fields are not strictly necessary for the order logic, however;
    // since these are ephemeral fields that could be changed by the users after an order has been completed, we
    // want to store these as a record for good practice to ensure from 1 order record we have adequate information of
    // what goods were bought and sold.
    string session_name = 20;
    string session_description = 21;
    int64 session_date = 23;
    string tags = 16;
    string email = 17;

}

message Orders {
    repeated Order orders = 1;
}

enum TimeZone {
    PT = 0;
    CT = 1;
    ET = 2;
}


message Session {

    // Table fields
    // These fields are stored in the Session table
    int64 id = 1;
    // owner of the session
    int64 user_id = 11;

    enum PaywallType {
        DONATION = 0;
        PAY_TO_PARTICIPATE = 1;
    }

    enum SourceType {
        VIA = 0;
        ZOOM_WEBHOOK = 1;
    }

    string name = 2;
    string description = 3;
    int64 start_time = 4;
    int32 max_session_size = 5;
    string banner_img_url = 6;
    int64 cost = 7;
    // duration unit is minutes
    int64 duration = 8;
    OptionalString meeting_url = 9;
    string profile_img_url = 10;

    string tags = 16;
    OptionalString zoom_password = 17;
    OptionalBool is_draft = 20;
    PaywallType paywall_type = 21;
    TimeZone time_zone = 22;
    OptionalInt64 zoom_meeting_id = 24;
    OptionalString zoom_meeting_join_url = 25;
    OptionalString zoom_meeting_start_url = 26;
    SourceType source = 27;
    // whether we should sync updates/deletes to zoom
    OptionalBool zoom_sync_enabled = 28;

    // Hydrated fields
    bool purchased = 18;
    User user = 19;

    // Only used in request to create session
    bool create_meeting_in_zoom =23;

    // Used at call sites to determine whether the call to UpdateSession should also update in zoom
    bool should_zoom_sync_on_update = 29;

    // for meetings created in zoom that repeat each meeting has an occurrence
    string zoom_occurrence_id = 30;

    // The only types via live cares about are 2 (singular) and 8 (reocurring)
    int64 zoom_meeting_type = 31;

}

message Sessions {
    repeated Session sessions =1;
}

message ZoomToken {

    reserved 7;
    reserved "provider_id";
    int64 id = 1;
    string access_token = 2;
    string token_type = 3;
    string refresh_token = 4;
    int64 expires_in =5;
    string scope = 6;
    int64 user_id =8;
}