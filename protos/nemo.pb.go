// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: nemo.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UploadStatus int32

const (
	UploadStatus_STARTED   UploadStatus = 0
	UploadStatus_SUCCEEDED UploadStatus = 1
	UploadStatus_FAILED    UploadStatus = 2
)

// Enum value maps for UploadStatus.
var (
	UploadStatus_name = map[int32]string{
		0: "STARTED",
		1: "SUCCEEDED",
		2: "FAILED",
	}
	UploadStatus_value = map[string]int32{
		"STARTED":   0,
		"SUCCEEDED": 1,
		"FAILED":    2,
	}
)

func (x UploadStatus) Enum() *UploadStatus {
	p := new(UploadStatus)
	*p = x
	return p
}

func (x UploadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[0].Descriptor()
}

func (UploadStatus) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[0]
}

func (x UploadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadStatus.Descriptor instead.
func (UploadStatus) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{0}
}

type PaymentPlatforms int32

const (
	PaymentPlatforms_STRIPE PaymentPlatforms = 0 // Tadd more payment platforms here
)

// Enum value maps for PaymentPlatforms.
var (
	PaymentPlatforms_name = map[int32]string{
		0: "STRIPE",
	}
	PaymentPlatforms_value = map[string]int32{
		"STRIPE": 0,
	}
)

func (x PaymentPlatforms) Enum() *PaymentPlatforms {
	p := new(PaymentPlatforms)
	*p = x
	return p
}

func (x PaymentPlatforms) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentPlatforms) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[1].Descriptor()
}

func (PaymentPlatforms) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[1]
}

func (x PaymentPlatforms) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentPlatforms.Descriptor instead.
func (PaymentPlatforms) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{1}
}

type TransactionType int32

const (
	TransactionType_NONE     TransactionType = 0
	TransactionType_PURCHASE TransactionType = 1
	TransactionType_DONATION TransactionType = 2
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "NONE",
		1: "PURCHASE",
		2: "DONATION",
	}
	TransactionType_value = map[string]int32{
		"NONE":     0,
		"PURCHASE": 1,
		"DONATION": 2,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[2].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[2]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{2}
}

type TimeZone int32

const (
	TimeZone_PT TimeZone = 0
	TimeZone_CT TimeZone = 1
	TimeZone_ET TimeZone = 2
)

// Enum value maps for TimeZone.
var (
	TimeZone_name = map[int32]string{
		0: "PT",
		1: "CT",
		2: "ET",
	}
	TimeZone_value = map[string]int32{
		"PT": 0,
		"CT": 1,
		"ET": 2,
	}
)

func (x TimeZone) Enum() *TimeZone {
	p := new(TimeZone)
	*p = x
	return p
}

func (x TimeZone) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeZone) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[3].Descriptor()
}

func (TimeZone) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[3]
}

func (x TimeZone) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeZone.Descriptor instead.
func (TimeZone) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{3}
}

type SignedImageUploadUrlRequest_Ext int32

const (
	SignedImageUploadUrlRequest_NONE SignedImageUploadUrlRequest_Ext = 0
	SignedImageUploadUrlRequest_JPG  SignedImageUploadUrlRequest_Ext = 1
	SignedImageUploadUrlRequest_JPEG SignedImageUploadUrlRequest_Ext = 2
	SignedImageUploadUrlRequest_GIF  SignedImageUploadUrlRequest_Ext = 3
	SignedImageUploadUrlRequest_PNG  SignedImageUploadUrlRequest_Ext = 4
)

// Enum value maps for SignedImageUploadUrlRequest_Ext.
var (
	SignedImageUploadUrlRequest_Ext_name = map[int32]string{
		0: "NONE",
		1: "JPG",
		2: "JPEG",
		3: "GIF",
		4: "PNG",
	}
	SignedImageUploadUrlRequest_Ext_value = map[string]int32{
		"NONE": 0,
		"JPG":  1,
		"JPEG": 2,
		"GIF":  3,
		"PNG":  4,
	}
)

func (x SignedImageUploadUrlRequest_Ext) Enum() *SignedImageUploadUrlRequest_Ext {
	p := new(SignedImageUploadUrlRequest_Ext)
	*p = x
	return p
}

func (x SignedImageUploadUrlRequest_Ext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedImageUploadUrlRequest_Ext) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[4].Descriptor()
}

func (SignedImageUploadUrlRequest_Ext) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[4]
}

func (x SignedImageUploadUrlRequest_Ext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedImageUploadUrlRequest_Ext.Descriptor instead.
func (SignedImageUploadUrlRequest_Ext) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{25, 0}
}

// The status of the order:
type Order_PaymentPlatformStatus int32

const (
	Order_CREATED Order_PaymentPlatformStatus = 0
	Order_FAILED  Order_PaymentPlatformStatus = 1
	// Succeeded means we have charged for this order and this
	// transaction should exist as completed in the payment providers system
	Order_SUCCEEDED        Order_PaymentPlatformStatus = 2
	Order_ATTACHED         Order_PaymentPlatformStatus = 3
	Order_PROVIDER_CREATED Order_PaymentPlatformStatus = 4
)

// Enum value maps for Order_PaymentPlatformStatus.
var (
	Order_PaymentPlatformStatus_name = map[int32]string{
		0: "CREATED",
		1: "FAILED",
		2: "SUCCEEDED",
		3: "ATTACHED",
		4: "PROVIDER_CREATED",
	}
	Order_PaymentPlatformStatus_value = map[string]int32{
		"CREATED":          0,
		"FAILED":           1,
		"SUCCEEDED":        2,
		"ATTACHED":         3,
		"PROVIDER_CREATED": 4,
	}
)

func (x Order_PaymentPlatformStatus) Enum() *Order_PaymentPlatformStatus {
	p := new(Order_PaymentPlatformStatus)
	*p = x
	return p
}

func (x Order_PaymentPlatformStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_PaymentPlatformStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[5].Descriptor()
}

func (Order_PaymentPlatformStatus) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[5]
}

func (x Order_PaymentPlatformStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_PaymentPlatformStatus.Descriptor instead.
func (Order_PaymentPlatformStatus) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{48, 0}
}

type Session_PaywallType int32

const (
	Session_DONATION           Session_PaywallType = 0
	Session_PAY_TO_PARTICIPATE Session_PaywallType = 1
)

// Enum value maps for Session_PaywallType.
var (
	Session_PaywallType_name = map[int32]string{
		0: "DONATION",
		1: "PAY_TO_PARTICIPATE",
	}
	Session_PaywallType_value = map[string]int32{
		"DONATION":           0,
		"PAY_TO_PARTICIPATE": 1,
	}
)

func (x Session_PaywallType) Enum() *Session_PaywallType {
	p := new(Session_PaywallType)
	*p = x
	return p
}

func (x Session_PaywallType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_PaywallType) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[6].Descriptor()
}

func (Session_PaywallType) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[6]
}

func (x Session_PaywallType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_PaywallType.Descriptor instead.
func (Session_PaywallType) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{50, 0}
}

type Session_SourceType int32

const (
	Session_VIA          Session_SourceType = 0
	Session_ZOOM_WEBHOOK Session_SourceType = 1
)

// Enum value maps for Session_SourceType.
var (
	Session_SourceType_name = map[int32]string{
		0: "VIA",
		1: "ZOOM_WEBHOOK",
	}
	Session_SourceType_value = map[string]int32{
		"VIA":          0,
		"ZOOM_WEBHOOK": 1,
	}
)

func (x Session_SourceType) Enum() *Session_SourceType {
	p := new(Session_SourceType)
	*p = x
	return p
}

func (x Session_SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_nemo_proto_enumTypes[7].Descriptor()
}

func (Session_SourceType) Type() protoreflect.EnumType {
	return &file_nemo_proto_enumTypes[7]
}

func (x Session_SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_SourceType.Descriptor instead.
func (Session_SourceType) EnumDescriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{50, 1}
}

type SyncZoomMeetingIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeetingIds []int64 `protobuf:"varint,1,rep,packed,name=meeting_ids,json=meetingIds,proto3" json:"meeting_ids,omitempty"`
	UserId     int64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SyncZoomMeetingIdsRequest) Reset() {
	*x = SyncZoomMeetingIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncZoomMeetingIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncZoomMeetingIdsRequest) ProtoMessage() {}

func (x *SyncZoomMeetingIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncZoomMeetingIdsRequest.ProtoReflect.Descriptor instead.
func (*SyncZoomMeetingIdsRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{0}
}

func (x *SyncZoomMeetingIdsRequest) GetMeetingIds() []int64 {
	if x != nil {
		return x.MeetingIds
	}
	return nil
}

func (x *SyncZoomMeetingIdsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SyncZoomMeetingIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errs      []string `protobuf:"bytes,1,rep,name=errs,proto3" json:"errs,omitempty"`
	Successes int64    `protobuf:"varint,2,opt,name=successes,proto3" json:"successes,omitempty"`
}

func (x *SyncZoomMeetingIdsResponse) Reset() {
	*x = SyncZoomMeetingIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncZoomMeetingIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncZoomMeetingIdsResponse) ProtoMessage() {}

func (x *SyncZoomMeetingIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncZoomMeetingIdsResponse.ProtoReflect.Descriptor instead.
func (*SyncZoomMeetingIdsResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{1}
}

func (x *SyncZoomMeetingIdsResponse) GetErrs() []string {
	if x != nil {
		return x.Errs
	}
	return nil
}

func (x *SyncZoomMeetingIdsResponse) GetSuccesses() int64 {
	if x != nil {
		return x.Successes
	}
	return 0
}

type OptionalBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalBool) Reset() {
	*x = OptionalBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalBool) ProtoMessage() {}

func (x *OptionalBool) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalBool.ProtoReflect.Descriptor instead.
func (*OptionalBool) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{2}
}

func (x *OptionalBool) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type OptionalString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalString) Reset() {
	*x = OptionalString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalString) ProtoMessage() {}

func (x *OptionalString) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalString.ProtoReflect.Descriptor instead.
func (*OptionalString) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{3}
}

func (x *OptionalString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type OptionalInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OptionalInt64) Reset() {
	*x = OptionalInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalInt64) ProtoMessage() {}

func (x *OptionalInt64) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalInt64.ProtoReflect.Descriptor instead.
func (*OptionalInt64) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{4}
}

func (x *OptionalInt64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{5}
}

type RedirectUri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
}

func (x *RedirectUri) Reset() {
	*x = RedirectUri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectUri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectUri) ProtoMessage() {}

func (x *RedirectUri) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectUri.ProtoReflect.Descriptor instead.
func (*RedirectUri) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{6}
}

func (x *RedirectUri) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type SessionsByIdAndDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// unix timestamp
	Date int64 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *SessionsByIdAndDateRequest) Reset() {
	*x = SessionsByIdAndDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionsByIdAndDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsByIdAndDateRequest) ProtoMessage() {}

func (x *SessionsByIdAndDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsByIdAndDateRequest.ProtoReflect.Descriptor instead.
func (*SessionsByIdAndDateRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{7}
}

func (x *SessionsByIdAndDateRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionsByIdAndDateRequest) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type GetSessionByUserIdAndZoomMeetingIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ZoomId int64 `protobuf:"varint,2,opt,name=zoom_id,json=zoomId,proto3" json:"zoom_id,omitempty"`
}

func (x *GetSessionByUserIdAndZoomMeetingIdRequest) Reset() {
	*x = GetSessionByUserIdAndZoomMeetingIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionByUserIdAndZoomMeetingIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionByUserIdAndZoomMeetingIdRequest) ProtoMessage() {}

func (x *GetSessionByUserIdAndZoomMeetingIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionByUserIdAndZoomMeetingIdRequest.ProtoReflect.Descriptor instead.
func (*GetSessionByUserIdAndZoomMeetingIdRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{8}
}

func (x *GetSessionByUserIdAndZoomMeetingIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSessionByUserIdAndZoomMeetingIdRequest) GetZoomId() int64 {
	if x != nil {
		return x.ZoomId
	}
	return 0
}

type GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ZoomId     int64  `protobuf:"varint,2,opt,name=zoom_id,json=zoomId,proto3" json:"zoom_id,omitempty"`
	RawPayload string `protobuf:"bytes,3,opt,name=raw_payload,json=rawPayload,proto3" json:"raw_payload,omitempty"`
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) Reset() {
	*x = GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) ProtoMessage() {}

func (x *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest.ProtoReflect.Descriptor instead.
func (*GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{9}
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) GetZoomId() int64 {
	if x != nil {
		return x.ZoomId
	}
	return 0
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) GetRawPayload() string {
	if x != nil {
		return x.RawPayload
	}
	return ""
}

type GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ZoomId       int64  `protobuf:"varint,2,opt,name=zoom_id,json=zoomId,proto3" json:"zoom_id,omitempty"`
	OccurrenceId string `protobuf:"bytes,3,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) Reset() {
	*x = GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) ProtoMessage() {}

func (x *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest.ProtoReflect.Descriptor instead.
func (*GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{10}
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) GetZoomId() int64 {
	if x != nil {
		return x.ZoomId
	}
	return 0
}

func (x *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

type ZoomAccountId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ZoomAccountId) Reset() {
	*x = ZoomAccountId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomAccountId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomAccountId) ProtoMessage() {}

func (x *ZoomAccountId) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomAccountId.ProtoReflect.Descriptor instead.
func (*ZoomAccountId) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{11}
}

func (x *ZoomAccountId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateMeetingInZoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields      *CreateZoomMeetingFields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	AccessToken string                   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *CreateMeetingInZoomRequest) Reset() {
	*x = CreateMeetingInZoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMeetingInZoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeetingInZoomRequest) ProtoMessage() {}

func (x *CreateMeetingInZoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeetingInZoomRequest.ProtoReflect.Descriptor instead.
func (*CreateMeetingInZoomRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{12}
}

func (x *CreateMeetingInZoomRequest) GetFields() *CreateZoomMeetingFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateMeetingInZoomRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type CreateZoomMeetingFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string                            `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Type      int64                             `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	StartTime string                            `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Password  string                            `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Duration  int64                             `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Settings  *CreateZoomMeetingFields_Settings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *CreateZoomMeetingFields) Reset() {
	*x = CreateZoomMeetingFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateZoomMeetingFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateZoomMeetingFields) ProtoMessage() {}

func (x *CreateZoomMeetingFields) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateZoomMeetingFields.ProtoReflect.Descriptor instead.
func (*CreateZoomMeetingFields) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{13}
}

func (x *CreateZoomMeetingFields) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CreateZoomMeetingFields) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateZoomMeetingFields) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *CreateZoomMeetingFields) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateZoomMeetingFields) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *CreateZoomMeetingFields) GetSettings() *CreateZoomMeetingFields_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateMeetingInZoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields      *UpdateZoomMeetingFields `protobuf:"bytes,1,opt,name=fields,proto3" json:"fields,omitempty"`
	AccessToken string                   `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	MeetingId   int64                    `protobuf:"varint,3,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	// optional
	OccurrenceId string `protobuf:"bytes,4,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
}

func (x *UpdateMeetingInZoomRequest) Reset() {
	*x = UpdateMeetingInZoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeetingInZoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeetingInZoomRequest) ProtoMessage() {}

func (x *UpdateMeetingInZoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeetingInZoomRequest.ProtoReflect.Descriptor instead.
func (*UpdateMeetingInZoomRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateMeetingInZoomRequest) GetFields() *UpdateZoomMeetingFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateMeetingInZoomRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *UpdateMeetingInZoomRequest) GetMeetingId() int64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *UpdateMeetingInZoomRequest) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

type DeleteMeetingInZoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	MeetingId   int64  `protobuf:"varint,2,opt,name=meeting_id,json=meetingId,proto3" json:"meeting_id,omitempty"`
	// only meetings that are reoccurring have this so we only want to delete that instance instead of all the meetings with the id.
	OccurrenceId string `protobuf:"bytes,3,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
}

func (x *DeleteMeetingInZoomRequest) Reset() {
	*x = DeleteMeetingInZoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMeetingInZoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMeetingInZoomRequest) ProtoMessage() {}

func (x *DeleteMeetingInZoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMeetingInZoomRequest.ProtoReflect.Descriptor instead.
func (*DeleteMeetingInZoomRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteMeetingInZoomRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *DeleteMeetingInZoomRequest) GetMeetingId() int64 {
	if x != nil {
		return x.MeetingId
	}
	return 0
}

func (x *DeleteMeetingInZoomRequest) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

type UpdateZoomMeetingFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Duration  int64  `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *UpdateZoomMeetingFields) Reset() {
	*x = UpdateZoomMeetingFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateZoomMeetingFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateZoomMeetingFields) ProtoMessage() {}

func (x *UpdateZoomMeetingFields) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateZoomMeetingFields.ProtoReflect.Descriptor instead.
func (*UpdateZoomMeetingFields) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateZoomMeetingFields) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *UpdateZoomMeetingFields) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *UpdateZoomMeetingFields) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type CreateMeetingInZoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartUrl string `protobuf:"bytes,2,opt,name=start_url,json=startUrl,proto3" json:"start_url,omitempty"`
	JoinUrl  string `protobuf:"bytes,3,opt,name=join_url,json=joinUrl,proto3" json:"join_url,omitempty"`
}

func (x *CreateMeetingInZoomResponse) Reset() {
	*x = CreateMeetingInZoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMeetingInZoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMeetingInZoomResponse) ProtoMessage() {}

func (x *CreateMeetingInZoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMeetingInZoomResponse.ProtoReflect.Descriptor instead.
func (*CreateMeetingInZoomResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{17}
}

func (x *CreateMeetingInZoomResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateMeetingInZoomResponse) GetStartUrl() string {
	if x != nil {
		return x.StartUrl
	}
	return ""
}

func (x *CreateMeetingInZoomResponse) GetJoinUrl() string {
	if x != nil {
		return x.JoinUrl
	}
	return ""
}

type UpdateMeetingInZoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateMeetingInZoomResponse) Reset() {
	*x = UpdateMeetingInZoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMeetingInZoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMeetingInZoomResponse) ProtoMessage() {}

func (x *UpdateMeetingInZoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMeetingInZoomResponse.ProtoReflect.Descriptor instead.
func (*UpdateMeetingInZoomResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{18}
}

type DeleteMeetingInZoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteMeetingInZoomResponse) Reset() {
	*x = DeleteMeetingInZoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMeetingInZoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMeetingInZoomResponse) ProtoMessage() {}

func (x *DeleteMeetingInZoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMeetingInZoomResponse.ProtoReflect.Descriptor instead.
func (*DeleteMeetingInZoomResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{19}
}

type ZoomAppInstallUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ZoomAppInstallUrlRequest) Reset() {
	*x = ZoomAppInstallUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomAppInstallUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomAppInstallUrlRequest) ProtoMessage() {}

func (x *ZoomAppInstallUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomAppInstallUrlRequest.ProtoReflect.Descriptor instead.
func (*ZoomAppInstallUrlRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{20}
}

func (x *ZoomAppInstallUrlRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ZoomAppInstallUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ZoomAppInstallUrlResponse) Reset() {
	*x = ZoomAppInstallUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomAppInstallUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomAppInstallUrlResponse) ProtoMessage() {}

func (x *ZoomAppInstallUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomAppInstallUrlResponse.ProtoReflect.Descriptor instead.
func (*ZoomAppInstallUrlResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{21}
}

func (x *ZoomAppInstallUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type UserProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User      *User      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	ZoomToken *ZoomToken `protobuf:"bytes,3,opt,name=zoom_token,json=zoomToken,proto3" json:"zoom_token,omitempty"`
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{22}
}

func (x *UserProfile) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserProfile) GetZoomToken() *ZoomToken {
	if x != nil {
		return x.ZoomToken
	}
	return nil
}

type StripeAppInstallUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *StripeAppInstallUrlRequest) Reset() {
	*x = StripeAppInstallUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeAppInstallUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeAppInstallUrlRequest) ProtoMessage() {}

func (x *StripeAppInstallUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeAppInstallUrlRequest.ProtoReflect.Descriptor instead.
func (*StripeAppInstallUrlRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{23}
}

func (x *StripeAppInstallUrlRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type StripeAppInstallUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *StripeAppInstallUrlResponse) Reset() {
	*x = StripeAppInstallUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeAppInstallUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeAppInstallUrlResponse) ProtoMessage() {}

func (x *StripeAppInstallUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeAppInstallUrlResponse.ProtoReflect.Descriptor instead.
func (*StripeAppInstallUrlResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{24}
}

func (x *StripeAppInstallUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// SignedImageUploadUrlRequest
// u, err := getSignedURL(signerUrl, url.Values{“content_type”: {“image/jpg”}, “ext”: {“jpg”}})
type SignedImageUploadUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ext SignedImageUploadUrlRequest_Ext `protobuf:"varint,1,opt,name=ext,proto3,enum=protos.SignedImageUploadUrlRequest_Ext" json:"ext,omitempty"`
}

func (x *SignedImageUploadUrlRequest) Reset() {
	*x = SignedImageUploadUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedImageUploadUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedImageUploadUrlRequest) ProtoMessage() {}

func (x *SignedImageUploadUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedImageUploadUrlRequest.ProtoReflect.Descriptor instead.
func (*SignedImageUploadUrlRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{25}
}

func (x *SignedImageUploadUrlRequest) GetExt() SignedImageUploadUrlRequest_Ext {
	if x != nil {
		return x.Ext
	}
	return SignedImageUploadUrlRequest_NONE
}

type Email struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Email) Reset() {
	*x = Email{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Email) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Email) ProtoMessage() {}

func (x *Email) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Email.ProtoReflect.Descriptor instead.
func (*Email) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{26}
}

func (x *Email) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type SignedImageUploadUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *SignedImageUploadUrlResponse) Reset() {
	*x = SignedImageUploadUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedImageUploadUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedImageUploadUrlResponse) ProtoMessage() {}

func (x *SignedImageUploadUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedImageUploadUrlResponse.ProtoReflect.Descriptor instead.
func (*SignedImageUploadUrlResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{27}
}

func (x *SignedImageUploadUrlResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// CreateImageRequest
// Once the front end has uploaded the image to the signed URL,
// the front end needs to establish that record in the backend against the user_id
type CreateImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	UserId   int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *CreateImageRequest) Reset() {
	*x = CreateImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateImageRequest) ProtoMessage() {}

func (x *CreateImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateImageRequest.ProtoReflect.Descriptor instead.
func (*CreateImageRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{28}
}

func (x *CreateImageRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *CreateImageRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DB primary key of the uploaded image
	Id     int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status UploadStatus `protobuf:"varint,2,opt,name=status,proto3,enum=protos.UploadStatus" json:"status,omitempty"`
	// user_id of the user who owns this image
	UserId int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// only updated once processed by cloud function
	ServingUrl string `protobuf:"bytes,4,opt,name=serving_url,json=servingUrl,proto3" json:"serving_url,omitempty"`
	ObjectId   string `protobuf:"bytes,5,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{29}
}

func (x *Image) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Image) GetStatus() UploadStatus {
	if x != nil {
		return x.Status
	}
	return UploadStatus_STARTED
}

func (x *Image) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Image) GetServingUrl() string {
	if x != nil {
		return x.ServingUrl
	}
	return ""
}

func (x *Image) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type Images struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *Images) Reset() {
	*x = Images{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Images) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Images) ProtoMessage() {}

func (x *Images) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Images.ProtoReflect.Descriptor instead.
func (*Images) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{30}
}

func (x *Images) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type UpdateImageStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectId string       `protobuf:"bytes,1,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	Status   UploadStatus `protobuf:"varint,2,opt,name=status,proto3,enum=protos.UploadStatus" json:"status,omitempty"`
}

func (x *UpdateImageStatusRequest) Reset() {
	*x = UpdateImageStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateImageStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateImageStatusRequest) ProtoMessage() {}

func (x *UpdateImageStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateImageStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateImageStatusRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateImageStatusRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *UpdateImageStatusRequest) GetStatus() UploadStatus {
	if x != nil {
		return x.Status
	}
	return UploadStatus_STARTED
}

type SessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Date  int64 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *SessionsRequest) Reset() {
	*x = SessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsRequest) ProtoMessage() {}

func (x *SessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsRequest.ProtoReflect.Descriptor instead.
func (*SessionsRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{32}
}

func (x *SessionsRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SessionsRequest) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

type SessionsByTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit int64  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Date  int64  `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	Tag   string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SessionsByTagRequest) Reset() {
	*x = SessionsByTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionsByTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionsByTagRequest) ProtoMessage() {}

func (x *SessionsByTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionsByTagRequest.ProtoReflect.Descriptor instead.
func (*SessionsByTagRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{33}
}

func (x *SessionsByTagRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SessionsByTagRequest) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *SessionsByTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{34}
}

func (x *Id) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSessionByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId       int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OccurrenceId string `protobuf:"bytes,3,opt,name=occurrence_id,json=occurrenceId,proto3" json:"occurrence_id,omitempty"`
}

func (x *GetSessionByIdRequest) Reset() {
	*x = GetSessionByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionByIdRequest) ProtoMessage() {}

func (x *GetSessionByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionByIdRequest.ProtoReflect.Descriptor instead.
func (*GetSessionByIdRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{35}
}

func (x *GetSessionByIdRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSessionByIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetSessionByIdRequest) GetOccurrenceId() string {
	if x != nil {
		return x.OccurrenceId
	}
	return ""
}

type DeleteSessionsByZoomMeetingIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoomMeetingId int64 `protobuf:"varint,1,opt,name=zoom_meeting_id,json=zoomMeetingId,proto3" json:"zoom_meeting_id,omitempty"`
	UserId        int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *DeleteSessionsByZoomMeetingIdRequest) Reset() {
	*x = DeleteSessionsByZoomMeetingIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSessionsByZoomMeetingIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSessionsByZoomMeetingIdRequest) ProtoMessage() {}

func (x *DeleteSessionsByZoomMeetingIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSessionsByZoomMeetingIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteSessionsByZoomMeetingIdRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteSessionsByZoomMeetingIdRequest) GetZoomMeetingId() int64 {
	if x != nil {
		return x.ZoomMeetingId
	}
	return 0
}

func (x *DeleteSessionsByZoomMeetingIdRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SubId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubId) Reset() {
	*x = SubId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubId) ProtoMessage() {}

func (x *SubId) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubId.ProtoReflect.Descriptor instead.
func (*SubId) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{37}
}

func (x *SubId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PaymentPlatformOrderId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PaymentPlatformOrderId) Reset() {
	*x = PaymentPlatformOrderId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentPlatformOrderId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentPlatformOrderId) ProtoMessage() {}

func (x *PaymentPlatformOrderId) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentPlatformOrderId.ProtoReflect.Descriptor instead.
func (*PaymentPlatformOrderId) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{38}
}

func (x *PaymentPlatformOrderId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PaymentCard is not stored in our DB it is acquired synchronously within the CreateOrder
// rpc call and returned to the client
type PaymentCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	ExpMonth string `protobuf:"bytes,2,opt,name=exp_month,json=expMonth,proto3" json:"exp_month,omitempty"`
	ExpYear  string `protobuf:"bytes,3,opt,name=exp_year,json=expYear,proto3" json:"exp_year,omitempty"`
	Cvc      string `protobuf:"bytes,4,opt,name=cvc,proto3" json:"cvc,omitempty"`
}

func (x *PaymentCard) Reset() {
	*x = PaymentCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCard) ProtoMessage() {}

func (x *PaymentCard) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCard.ProtoReflect.Descriptor instead.
func (*PaymentCard) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{39}
}

func (x *PaymentCard) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *PaymentCard) GetExpMonth() string {
	if x != nil {
		return x.ExpMonth
	}
	return ""
}

func (x *PaymentCard) GetExpYear() string {
	if x != nil {
		return x.ExpYear
	}
	return ""
}

func (x *PaymentCard) GetCvc() string {
	if x != nil {
		return x.Cvc
	}
	return ""
}

type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User to create order from
	// obtained in the http api layer from jwt token
	// This is mapped to a customer which is used in the order
	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId int64 `protobuf:"varint,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// This is supplied from the front end and used to ensure the
	// session cost we have in our system at the time of the order matches the cost supplied from the front end
	Cost int64 `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	// Type of transaction, purchase, donation
	TransactionType TransactionType `protobuf:"varint,4,opt,name=transaction_type,json=transactionType,proto3,enum=protos.TransactionType" json:"transaction_type,omitempty"`
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{40}
}

func (x *CreateOrderRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateOrderRequest) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *CreateOrderRequest) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CreateOrderRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_NONE
}

type CreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// convenience so the client has the request/response in one object
	Request *CreateOrderRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// This is not stored in DB, just returned in synchronously to client
	PaymentMethods []*PaymentMethodData `protobuf:"bytes,2,rep,name=payment_methods,json=paymentMethods,proto3" json:"payment_methods,omitempty"`
	// live.db database storage of order
	Order *Order `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// not saved to db,  returned to client synchronously
	ClientSecret string `protobuf:"bytes,4,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
}

func (x *CreateOrderResponse) Reset() {
	*x = CreateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponse) ProtoMessage() {}

func (x *CreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{41}
}

func (x *CreateOrderResponse) GetRequest() *CreateOrderRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CreateOrderResponse) GetPaymentMethods() []*PaymentMethodData {
	if x != nil {
		return x.PaymentMethods
	}
	return nil
}

func (x *CreateOrderResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *CreateOrderResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type UpdateOrderPaymentMethodIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId         int64  `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	PaymentMethodId string `protobuf:"bytes,2,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
}

func (x *UpdateOrderPaymentMethodIdRequest) Reset() {
	*x = UpdateOrderPaymentMethodIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderPaymentMethodIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderPaymentMethodIdRequest) ProtoMessage() {}

func (x *UpdateOrderPaymentMethodIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderPaymentMethodIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderPaymentMethodIdRequest) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{42}
}

func (x *UpdateOrderPaymentMethodIdRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *UpdateOrderPaymentMethodIdRequest) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName         string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName          string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email             string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Phone             string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	ProfileImgUrl     string `protobuf:"bytes,6,opt,name=profile_img_url,json=profileImgUrl,proto3" json:"profile_img_url,omitempty"`
	AuthZeroSubId     string `protobuf:"bytes,7,opt,name=auth_zero_sub_id,json=authZeroSubId,proto3" json:"auth_zero_sub_id,omitempty"`
	ZoomAccessToken   string `protobuf:"bytes,8,opt,name=zoom_access_token,json=zoomAccessToken,proto3" json:"zoom_access_token,omitempty"`
	ZoomRefreshToken  string `protobuf:"bytes,9,opt,name=zoom_refresh_token,json=zoomRefreshToken,proto3" json:"zoom_refresh_token,omitempty"`
	Name              string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	Description       string `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	BannerImgUrl      string `protobuf:"bytes,12,opt,name=banner_img_url,json=bannerImgUrl,proto3" json:"banner_img_url,omitempty"`
	InstagramUrl      string `protobuf:"bytes,13,opt,name=instagram_url,json=instagramUrl,proto3" json:"instagram_url,omitempty"`
	FacebookUrl       string `protobuf:"bytes,14,opt,name=facebook_url,json=facebookUrl,proto3" json:"facebook_url,omitempty"`
	YoutubeChannelUrl string `protobuf:"bytes,15,opt,name=youtube_channel_url,json=youtubeChannelUrl,proto3" json:"youtube_channel_url,omitempty"`
	TwitterUrl        string `protobuf:"bytes,16,opt,name=twitter_url,json=twitterUrl,proto3" json:"twitter_url,omitempty"`
	Tags              string `protobuf:"bytes,17,opt,name=tags,proto3" json:"tags,omitempty"`
	ZoomAppInstalled  bool   `protobuf:"varint,21,opt,name=zoom_app_installed,json=zoomAppInstalled,proto3" json:"zoom_app_installed,omitempty"`
	ZoomAccountId     string `protobuf:"bytes,25,opt,name=zoom_account_id,json=zoomAccountId,proto3" json:"zoom_account_id,omitempty"`
	// hydrated fields:
	UpcomingSessions        *Sessions `protobuf:"bytes,18,opt,name=upcoming_sessions,json=upcomingSessions,proto3" json:"upcoming_sessions,omitempty"`
	PreviousSessions        *Sessions `protobuf:"bytes,19,opt,name=previous_sessions,json=previousSessions,proto3" json:"previous_sessions,omitempty"`
	LiveSessions            *Sessions `protobuf:"bytes,20,opt,name=live_sessions,json=liveSessions,proto3" json:"live_sessions,omitempty"`
	OrderedUpcomingSessions *Sessions `protobuf:"bytes,22,opt,name=ordered_upcoming_sessions,json=orderedUpcomingSessions,proto3" json:"ordered_upcoming_sessions,omitempty"`
	OrderedPreviousSessions *Sessions `protobuf:"bytes,23,opt,name=ordered_previous_sessions,json=orderedPreviousSessions,proto3" json:"ordered_previous_sessions,omitempty"`
	OrderedLiveSessions     *Sessions `protobuf:"bytes,24,opt,name=ordered_live_sessions,json=orderedLiveSessions,proto3" json:"ordered_live_sessions,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{43}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetProfileImgUrl() string {
	if x != nil {
		return x.ProfileImgUrl
	}
	return ""
}

func (x *User) GetAuthZeroSubId() string {
	if x != nil {
		return x.AuthZeroSubId
	}
	return ""
}

func (x *User) GetZoomAccessToken() string {
	if x != nil {
		return x.ZoomAccessToken
	}
	return ""
}

func (x *User) GetZoomRefreshToken() string {
	if x != nil {
		return x.ZoomRefreshToken
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *User) GetBannerImgUrl() string {
	if x != nil {
		return x.BannerImgUrl
	}
	return ""
}

func (x *User) GetInstagramUrl() string {
	if x != nil {
		return x.InstagramUrl
	}
	return ""
}

func (x *User) GetFacebookUrl() string {
	if x != nil {
		return x.FacebookUrl
	}
	return ""
}

func (x *User) GetYoutubeChannelUrl() string {
	if x != nil {
		return x.YoutubeChannelUrl
	}
	return ""
}

func (x *User) GetTwitterUrl() string {
	if x != nil {
		return x.TwitterUrl
	}
	return ""
}

func (x *User) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *User) GetZoomAppInstalled() bool {
	if x != nil {
		return x.ZoomAppInstalled
	}
	return false
}

func (x *User) GetZoomAccountId() string {
	if x != nil {
		return x.ZoomAccountId
	}
	return ""
}

func (x *User) GetUpcomingSessions() *Sessions {
	if x != nil {
		return x.UpcomingSessions
	}
	return nil
}

func (x *User) GetPreviousSessions() *Sessions {
	if x != nil {
		return x.PreviousSessions
	}
	return nil
}

func (x *User) GetLiveSessions() *Sessions {
	if x != nil {
		return x.LiveSessions
	}
	return nil
}

func (x *User) GetOrderedUpcomingSessions() *Sessions {
	if x != nil {
		return x.OrderedUpcomingSessions
	}
	return nil
}

func (x *User) GetOrderedPreviousSessions() *Sessions {
	if x != nil {
		return x.OrderedPreviousSessions
	}
	return nil
}

func (x *User) GetOrderedLiveSessions() *Sessions {
	if x != nil {
		return x.OrderedLiveSessions
	}
	return nil
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{44}
}

func (x *Users) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

// Customer represents a user record that has started a checkout flow and is meant to be payment platform agnostic
// for stripe this gets created when we call `customer.New()` to the stripe API
type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary key in via.live db
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// foreign to the user record in via.live db
	UserId   int64            `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Platform PaymentPlatforms `protobuf:"varint,3,opt,name=platform,proto3,enum=protos.PaymentPlatforms" json:"platform,omitempty"`
	// Id that ties to the platform in which this record exists
	PaymentPlatformCustomerId string `protobuf:"bytes,4,opt,name=payment_platform_customer_id,json=paymentPlatformCustomerId,proto3" json:"payment_platform_customer_id,omitempty"`
	// Not strictly required
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{45}
}

func (x *Customer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Customer) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Customer) GetPlatform() PaymentPlatforms {
	if x != nil {
		return x.Platform
	}
	return PaymentPlatforms_STRIPE
}

func (x *Customer) GetPaymentPlatformCustomerId() string {
	if x != nil {
		return x.PaymentPlatformCustomerId
	}
	return ""
}

func (x *Customer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Customers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Customers []*Customer `protobuf:"bytes,1,rep,name=customers,proto3" json:"customers,omitempty"`
}

func (x *Customers) Reset() {
	*x = Customers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customers) ProtoMessage() {}

func (x *Customers) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customers.ProtoReflect.Descriptor instead.
func (*Customers) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{46}
}

func (x *Customers) GetCustomers() []*Customer {
	if x != nil {
		return x.Customers
	}
	return nil
}

type PaymentMethodData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//ID of the mayment method in striped system
	PaymentMethodId string `protobuf:"bytes,1,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	LastFour        string `protobuf:"bytes,2,opt,name=last_four,json=lastFour,proto3" json:"last_four,omitempty"`
	ExpMonth        int64  `protobuf:"varint,3,opt,name=exp_month,json=expMonth,proto3" json:"exp_month,omitempty"`
	ExpYear         int64  `protobuf:"varint,4,opt,name=exp_year,json=expYear,proto3" json:"exp_year,omitempty"`
	Network         string `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	Brand           string `protobuf:"bytes,6,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *PaymentMethodData) Reset() {
	*x = PaymentMethodData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethodData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethodData) ProtoMessage() {}

func (x *PaymentMethodData) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethodData.ProtoReflect.Descriptor instead.
func (*PaymentMethodData) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{47}
}

func (x *PaymentMethodData) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *PaymentMethodData) GetLastFour() string {
	if x != nil {
		return x.LastFour
	}
	return ""
}

func (x *PaymentMethodData) GetExpMonth() int64 {
	if x != nil {
		return x.ExpMonth
	}
	return 0
}

func (x *PaymentMethodData) GetExpYear() int64 {
	if x != nil {
		return x.ExpYear
	}
	return 0
}

func (x *PaymentMethodData) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *PaymentMethodData) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//unique identifier for via.live db
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// unique identifier of the customer record in via.live db
	CustomerId int64 `protobuf:"varint,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// the payment provider platform, ex. stripe
	PaymentPlatform PaymentPlatforms            `protobuf:"varint,3,opt,name=payment_platform,json=paymentPlatform,proto3,enum=protos.PaymentPlatforms" json:"payment_platform,omitempty"`
	Status          Order_PaymentPlatformStatus `protobuf:"varint,4,opt,name=status,proto3,enum=protos.Order_PaymentPlatformStatus" json:"status,omitempty"`
	// Unique identifier of the session in via.live db
	SessionId int64 `protobuf:"varint,19,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// This is the unique identifier that maps to the payment method used in the order.
	PaymentMethodId string `protobuf:"bytes,6,opt,name=payment_method_id,json=paymentMethodId,proto3" json:"payment_method_id,omitempty"`
	// The unique identifier for the order in payment providers system,
	// for stripe this is the payment_intent id
	PaymentPlatformOrderId    string `protobuf:"bytes,7,opt,name=payment_platform_order_id,json=paymentPlatformOrderId,proto3" json:"payment_platform_order_id,omitempty"`
	PaymentPlatformCustomerId string `protobuf:"bytes,8,opt,name=payment_platform_customer_id,json=paymentPlatformCustomerId,proto3" json:"payment_platform_customer_id,omitempty"`
	// amount In cents
	// This is the amount that was charged on the order for the given session
	Amount          int64           `protobuf:"varint,9,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionType TransactionType `protobuf:"varint,18,opt,name=transaction_type,json=transactionType,proto3,enum=protos.TransactionType" json:"transaction_type,omitempty"`
	//  The following fields are not strictly necessary for the order logic, however;
	// since these are ephemeral fields that could be changed by the users after an order has been completed, we
	// want to store these as a record for good practice to ensure from 1 order record we have adequate information of
	// what goods were bought and sold.
	SessionName        string `protobuf:"bytes,20,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
	SessionDescription string `protobuf:"bytes,21,opt,name=session_description,json=sessionDescription,proto3" json:"session_description,omitempty"`
	SessionDate        int64  `protobuf:"varint,23,opt,name=session_date,json=sessionDate,proto3" json:"session_date,omitempty"`
	Tags               string `protobuf:"bytes,16,opt,name=tags,proto3" json:"tags,omitempty"`
	Email              string `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{48}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetCustomerId() int64 {
	if x != nil {
		return x.CustomerId
	}
	return 0
}

func (x *Order) GetPaymentPlatform() PaymentPlatforms {
	if x != nil {
		return x.PaymentPlatform
	}
	return PaymentPlatforms_STRIPE
}

func (x *Order) GetStatus() Order_PaymentPlatformStatus {
	if x != nil {
		return x.Status
	}
	return Order_CREATED
}

func (x *Order) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Order) GetPaymentMethodId() string {
	if x != nil {
		return x.PaymentMethodId
	}
	return ""
}

func (x *Order) GetPaymentPlatformOrderId() string {
	if x != nil {
		return x.PaymentPlatformOrderId
	}
	return ""
}

func (x *Order) GetPaymentPlatformCustomerId() string {
	if x != nil {
		return x.PaymentPlatformCustomerId
	}
	return ""
}

func (x *Order) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Order) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_NONE
}

func (x *Order) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

func (x *Order) GetSessionDescription() string {
	if x != nil {
		return x.SessionDescription
	}
	return ""
}

func (x *Order) GetSessionDate() int64 {
	if x != nil {
		return x.SessionDate
	}
	return 0
}

func (x *Order) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Order) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Orders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *Orders) Reset() {
	*x = Orders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Orders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Orders) ProtoMessage() {}

func (x *Orders) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Orders.ProtoReflect.Descriptor instead.
func (*Orders) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{49}
}

func (x *Orders) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table fields
	// These fields are stored in the Session table
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// owner of the session
	UserId         int64  `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartTime      int64  `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	MaxSessionSize int32  `protobuf:"varint,5,opt,name=max_session_size,json=maxSessionSize,proto3" json:"max_session_size,omitempty"`
	BannerImgUrl   string `protobuf:"bytes,6,opt,name=banner_img_url,json=bannerImgUrl,proto3" json:"banner_img_url,omitempty"`
	Cost           int64  `protobuf:"varint,7,opt,name=cost,proto3" json:"cost,omitempty"`
	// duration unit is minutes
	Duration            int64               `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	MeetingUrl          *OptionalString     `protobuf:"bytes,9,opt,name=meeting_url,json=meetingUrl,proto3" json:"meeting_url,omitempty"`
	ProfileImgUrl       string              `protobuf:"bytes,10,opt,name=profile_img_url,json=profileImgUrl,proto3" json:"profile_img_url,omitempty"`
	Tags                string              `protobuf:"bytes,16,opt,name=tags,proto3" json:"tags,omitempty"`
	ZoomPassword        *OptionalString     `protobuf:"bytes,17,opt,name=zoom_password,json=zoomPassword,proto3" json:"zoom_password,omitempty"`
	IsDraft             *OptionalBool       `protobuf:"bytes,20,opt,name=is_draft,json=isDraft,proto3" json:"is_draft,omitempty"`
	PaywallType         Session_PaywallType `protobuf:"varint,21,opt,name=paywall_type,json=paywallType,proto3,enum=protos.Session_PaywallType" json:"paywall_type,omitempty"`
	TimeZone            TimeZone            `protobuf:"varint,22,opt,name=time_zone,json=timeZone,proto3,enum=protos.TimeZone" json:"time_zone,omitempty"`
	ZoomMeetingId       *OptionalInt64      `protobuf:"bytes,24,opt,name=zoom_meeting_id,json=zoomMeetingId,proto3" json:"zoom_meeting_id,omitempty"`
	ZoomMeetingJoinUrl  *OptionalString     `protobuf:"bytes,25,opt,name=zoom_meeting_join_url,json=zoomMeetingJoinUrl,proto3" json:"zoom_meeting_join_url,omitempty"`
	ZoomMeetingStartUrl *OptionalString     `protobuf:"bytes,26,opt,name=zoom_meeting_start_url,json=zoomMeetingStartUrl,proto3" json:"zoom_meeting_start_url,omitempty"`
	Source              Session_SourceType  `protobuf:"varint,27,opt,name=source,proto3,enum=protos.Session_SourceType" json:"source,omitempty"`
	// whether we should sync updates/deletes to zoom
	ZoomSyncEnabled *OptionalBool `protobuf:"bytes,28,opt,name=zoom_sync_enabled,json=zoomSyncEnabled,proto3" json:"zoom_sync_enabled,omitempty"`
	// Hydrated fields
	Purchased bool  `protobuf:"varint,18,opt,name=purchased,proto3" json:"purchased,omitempty"`
	User      *User `protobuf:"bytes,19,opt,name=user,proto3" json:"user,omitempty"`
	// Only used in request to create session
	CreateMeetingInZoom bool `protobuf:"varint,23,opt,name=create_meeting_in_zoom,json=createMeetingInZoom,proto3" json:"create_meeting_in_zoom,omitempty"`
	// Used at call sites to determine whether the call to UpdateSession should also update in zoom
	ShouldZoomSyncOnUpdate bool `protobuf:"varint,29,opt,name=should_zoom_sync_on_update,json=shouldZoomSyncOnUpdate,proto3" json:"should_zoom_sync_on_update,omitempty"`
	// for meetings created in zoom that repeat each meeting has an occurrence
	ZoomOccurrenceId string `protobuf:"bytes,30,opt,name=zoom_occurrence_id,json=zoomOccurrenceId,proto3" json:"zoom_occurrence_id,omitempty"`
	// The only types via live cares about are 2 (singular) and 8 (reocurring)
	ZoomMeetingType int64 `protobuf:"varint,31,opt,name=zoom_meeting_type,json=zoomMeetingType,proto3" json:"zoom_meeting_type,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{50}
}

func (x *Session) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Session) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Session) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Session) GetMaxSessionSize() int32 {
	if x != nil {
		return x.MaxSessionSize
	}
	return 0
}

func (x *Session) GetBannerImgUrl() string {
	if x != nil {
		return x.BannerImgUrl
	}
	return ""
}

func (x *Session) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Session) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Session) GetMeetingUrl() *OptionalString {
	if x != nil {
		return x.MeetingUrl
	}
	return nil
}

func (x *Session) GetProfileImgUrl() string {
	if x != nil {
		return x.ProfileImgUrl
	}
	return ""
}

func (x *Session) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Session) GetZoomPassword() *OptionalString {
	if x != nil {
		return x.ZoomPassword
	}
	return nil
}

func (x *Session) GetIsDraft() *OptionalBool {
	if x != nil {
		return x.IsDraft
	}
	return nil
}

func (x *Session) GetPaywallType() Session_PaywallType {
	if x != nil {
		return x.PaywallType
	}
	return Session_DONATION
}

func (x *Session) GetTimeZone() TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return TimeZone_PT
}

func (x *Session) GetZoomMeetingId() *OptionalInt64 {
	if x != nil {
		return x.ZoomMeetingId
	}
	return nil
}

func (x *Session) GetZoomMeetingJoinUrl() *OptionalString {
	if x != nil {
		return x.ZoomMeetingJoinUrl
	}
	return nil
}

func (x *Session) GetZoomMeetingStartUrl() *OptionalString {
	if x != nil {
		return x.ZoomMeetingStartUrl
	}
	return nil
}

func (x *Session) GetSource() Session_SourceType {
	if x != nil {
		return x.Source
	}
	return Session_VIA
}

func (x *Session) GetZoomSyncEnabled() *OptionalBool {
	if x != nil {
		return x.ZoomSyncEnabled
	}
	return nil
}

func (x *Session) GetPurchased() bool {
	if x != nil {
		return x.Purchased
	}
	return false
}

func (x *Session) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Session) GetCreateMeetingInZoom() bool {
	if x != nil {
		return x.CreateMeetingInZoom
	}
	return false
}

func (x *Session) GetShouldZoomSyncOnUpdate() bool {
	if x != nil {
		return x.ShouldZoomSyncOnUpdate
	}
	return false
}

func (x *Session) GetZoomOccurrenceId() string {
	if x != nil {
		return x.ZoomOccurrenceId
	}
	return ""
}

func (x *Session) GetZoomMeetingType() int64 {
	if x != nil {
		return x.ZoomMeetingType
	}
	return 0
}

type Sessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*Session `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *Sessions) Reset() {
	*x = Sessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sessions) ProtoMessage() {}

func (x *Sessions) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sessions.ProtoReflect.Descriptor instead.
func (*Sessions) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{51}
}

func (x *Sessions) GetSessions() []*Session {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type ZoomToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	TokenType    string `protobuf:"bytes,3,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	RefreshToken string `protobuf:"bytes,4,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	ExpiresIn    int64  `protobuf:"varint,5,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
	Scope        string `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	UserId       int64  `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ZoomToken) Reset() {
	*x = ZoomToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoomToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoomToken) ProtoMessage() {}

func (x *ZoomToken) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoomToken.ProtoReflect.Descriptor instead.
func (*ZoomToken) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{52}
}

func (x *ZoomToken) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ZoomToken) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *ZoomToken) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *ZoomToken) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *ZoomToken) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *ZoomToken) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *ZoomToken) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CreateZoomMeetingFields_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostVideo        string `protobuf:"bytes,1,opt,name=host_video,json=hostVideo,proto3" json:"host_video,omitempty"`
	ParticipantVideo string `protobuf:"bytes,2,opt,name=participant_video,json=participantVideo,proto3" json:"participant_video,omitempty"`
	JoinBeforeHost   string `protobuf:"bytes,3,opt,name=join_before_host,json=joinBeforeHost,proto3" json:"join_before_host,omitempty"`
	MuteUponEntry    string `protobuf:"bytes,4,opt,name=mute_upon_entry,json=muteUponEntry,proto3" json:"mute_upon_entry,omitempty"`
	WaitingRoom      string `protobuf:"bytes,5,opt,name=waiting_room,json=waitingRoom,proto3" json:"waiting_room,omitempty"`
}

func (x *CreateZoomMeetingFields_Settings) Reset() {
	*x = CreateZoomMeetingFields_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nemo_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateZoomMeetingFields_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateZoomMeetingFields_Settings) ProtoMessage() {}

func (x *CreateZoomMeetingFields_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_nemo_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateZoomMeetingFields_Settings.ProtoReflect.Descriptor instead.
func (*CreateZoomMeetingFields_Settings) Descriptor() ([]byte, []int) {
	return file_nemo_proto_rawDescGZIP(), []int{13, 0}
}

func (x *CreateZoomMeetingFields_Settings) GetHostVideo() string {
	if x != nil {
		return x.HostVideo
	}
	return ""
}

func (x *CreateZoomMeetingFields_Settings) GetParticipantVideo() string {
	if x != nil {
		return x.ParticipantVideo
	}
	return ""
}

func (x *CreateZoomMeetingFields_Settings) GetJoinBeforeHost() string {
	if x != nil {
		return x.JoinBeforeHost
	}
	return ""
}

func (x *CreateZoomMeetingFields_Settings) GetMuteUponEntry() string {
	if x != nil {
		return x.MuteUponEntry
	}
	return ""
}

func (x *CreateZoomMeetingFields_Settings) GetWaitingRoom() string {
	if x != nil {
		return x.WaitingRoom
	}
	return ""
}

var File_nemo_proto protoreflect.FileDescriptor

var file_nemo_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x22, 0x55, 0x0a, 0x19, 0x53, 0x79, 0x6e, 0x63, 0x5a, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x53,
	0x79, 0x6e, 0x63, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x72, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x72, 0x72, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x24, 0x0a, 0x0c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f, 0x0a, 0x0b, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x22, 0x49, 0x0a, 0x1a, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x7a, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x38, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x61,
	0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x7a, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x61, 0x77, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x38, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x7a, 0x6f, 0x6f,
	0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x0d, 0x5a, 0x6f, 0x6f, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x78, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xae, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0xcb, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x28, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x75, 0x74,
	0x65, 0x5f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x75, 0x74, 0x65, 0x55, 0x70, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x6f, 0x6d, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x63, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x65, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x22, 0x1d, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x5a, 0x6f,
	0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x2d, 0x0a, 0x19, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x61,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x0a, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x7a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x35, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x8e, 0x01, 0x0a, 0x1b, 0x53, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55,
	0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x52,
	0x03, 0x65, 0x78, 0x74, 0x22, 0x34, 0x0a, 0x03, 0x45, 0x78, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4a, 0x50, 0x47, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x4a, 0x50, 0x45, 0x47, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x49, 0x46, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4e, 0x47, 0x10, 0x04, 0x22, 0x1d, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x30, 0x0a, 0x1c, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x4a, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x06, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3b,
	0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22,
	0x14, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x24,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x7a,
	0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x05, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28,
	0x0a, 0x16, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x78, 0x70, 0x59, 0x65, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x76, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x63, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x22, 0xd9, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x6a, 0x0a, 0x21,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x22, 0x9f, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x7a, 0x6f,
	0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x7a, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x7a, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72,
	0x61, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x63, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x63,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x79, 0x6f, 0x75, 0x74,
	0x75, 0x62, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x77, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x7a, 0x6f, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x7a,
	0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x7a, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x11, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x35, 0x0a, 0x0d, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x17, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2b, 0x0a, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3b, 0x0a, 0x09, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x09, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78, 0x70, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70, 0x59, 0x65, 0x61, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x22, 0xd4,
	0x06, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x63, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x10,
	0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x8f, 0x0a, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0b, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x7a, 0x6f, 0x6f, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x79, 0x77, 0x61,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x77, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x52, 0x0d, 0x7a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x15, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x7a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x4b, 0x0a, 0x16,
	0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x13, 0x7a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x11, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0f,
	0x7a, 0x6f, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x6e, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x7a,
	0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x7a, 0x6f,
	0x6f, 0x6d, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x7a, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x7a, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x33, 0x0a, 0x0b, 0x50, 0x61,
	0x79, 0x77, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x59, 0x5f, 0x54,
	0x4f, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43, 0x49, 0x50, 0x41, 0x54, 0x45, 0x10, 0x01, 0x22,
	0x27, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x56, 0x49, 0x41, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x5a, 0x4f, 0x4f, 0x4d, 0x5f, 0x57,
	0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x22, 0x37, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xe3, 0x01, 0x0a, 0x09, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x2a, 0x36, 0x0a, 0x0c, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a,
	0x1e, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x10, 0x00, 0x2a,
	0x37, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x22, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x43, 0x54, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x54, 0x10, 0x02, 0x32, 0xdb, 0x1b, 0x0a,
	0x04, 0x4e, 0x65, 0x6d, 0x6f, 0x12, 0x29, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64,
	0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x53, 0x75, 0x62, 0x49, 0x64, 0x12,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x64, 0x1a, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x53, 0x75, 0x62, 0x49, 0x64,
	0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x5a, 0x6f, 0x6f, 0x6d,
	0x44, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64,
	0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x88, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x31,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x33, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x20,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4e, 0x6f,
	0x5a, 0x6f, 0x6f, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64,
	0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x70, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x33, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49,
	0x64, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x5a, 0x6f, 0x6f,
	0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5a, 0x6f, 0x6f,
	0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x5a, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x22,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x41, 0x70,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d,
	0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f,
	0x6f, 0x6d, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a,
	0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x5a, 0x6f, 0x6f, 0x6d, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x5a, 0x6f, 0x6f,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x5a, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5a, 0x6f, 0x6f, 0x6d, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x14, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x5a, 0x6f, 0x6f, 0x6d, 0x4d, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x33, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x49, 0x64,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x5a, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x55, 0x72, 0x69, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_nemo_proto_rawDescOnce sync.Once
	file_nemo_proto_rawDescData = file_nemo_proto_rawDesc
)

func file_nemo_proto_rawDescGZIP() []byte {
	file_nemo_proto_rawDescOnce.Do(func() {
		file_nemo_proto_rawDescData = protoimpl.X.CompressGZIP(file_nemo_proto_rawDescData)
	})
	return file_nemo_proto_rawDescData
}

var file_nemo_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_nemo_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_nemo_proto_goTypes = []interface{}{
	(UploadStatus)(0),                                 // 0: protos.UploadStatus
	(PaymentPlatforms)(0),                             // 1: protos.PaymentPlatforms
	(TransactionType)(0),                              // 2: protos.TransactionType
	(TimeZone)(0),                                     // 3: protos.TimeZone
	(SignedImageUploadUrlRequest_Ext)(0),              // 4: protos.SignedImageUploadUrlRequest.Ext
	(Order_PaymentPlatformStatus)(0),                  // 5: protos.Order.PaymentPlatformStatus
	(Session_PaywallType)(0),                          // 6: protos.Session.PaywallType
	(Session_SourceType)(0),                           // 7: protos.Session.SourceType
	(*SyncZoomMeetingIdsRequest)(nil),                 // 8: protos.SyncZoomMeetingIdsRequest
	(*SyncZoomMeetingIdsResponse)(nil),                // 9: protos.SyncZoomMeetingIdsResponse
	(*OptionalBool)(nil),                              // 10: protos.OptionalBool
	(*OptionalString)(nil),                            // 11: protos.OptionalString
	(*OptionalInt64)(nil),                             // 12: protos.OptionalInt64
	(*Empty)(nil),                                     // 13: protos.Empty
	(*RedirectUri)(nil),                               // 14: protos.RedirectUri
	(*SessionsByIdAndDateRequest)(nil),                // 15: protos.SessionsByIdAndDateRequest
	(*GetSessionByUserIdAndZoomMeetingIdRequest)(nil), // 16: protos.GetSessionByUserIdAndZoomMeetingIdRequest
	(*GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest)(nil), // 17: protos.GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest
	(*GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest)(nil), // 18: protos.GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest
	(*ZoomAccountId)(nil),                        // 19: protos.ZoomAccountId
	(*CreateMeetingInZoomRequest)(nil),           // 20: protos.CreateMeetingInZoomRequest
	(*CreateZoomMeetingFields)(nil),              // 21: protos.CreateZoomMeetingFields
	(*UpdateMeetingInZoomRequest)(nil),           // 22: protos.UpdateMeetingInZoomRequest
	(*DeleteMeetingInZoomRequest)(nil),           // 23: protos.DeleteMeetingInZoomRequest
	(*UpdateZoomMeetingFields)(nil),              // 24: protos.UpdateZoomMeetingFields
	(*CreateMeetingInZoomResponse)(nil),          // 25: protos.CreateMeetingInZoomResponse
	(*UpdateMeetingInZoomResponse)(nil),          // 26: protos.UpdateMeetingInZoomResponse
	(*DeleteMeetingInZoomResponse)(nil),          // 27: protos.DeleteMeetingInZoomResponse
	(*ZoomAppInstallUrlRequest)(nil),             // 28: protos.ZoomAppInstallUrlRequest
	(*ZoomAppInstallUrlResponse)(nil),            // 29: protos.ZoomAppInstallUrlResponse
	(*UserProfile)(nil),                          // 30: protos.UserProfile
	(*StripeAppInstallUrlRequest)(nil),           // 31: protos.StripeAppInstallUrlRequest
	(*StripeAppInstallUrlResponse)(nil),          // 32: protos.StripeAppInstallUrlResponse
	(*SignedImageUploadUrlRequest)(nil),          // 33: protos.SignedImageUploadUrlRequest
	(*Email)(nil),                                // 34: protos.Email
	(*SignedImageUploadUrlResponse)(nil),         // 35: protos.SignedImageUploadUrlResponse
	(*CreateImageRequest)(nil),                   // 36: protos.CreateImageRequest
	(*Image)(nil),                                // 37: protos.Image
	(*Images)(nil),                               // 38: protos.Images
	(*UpdateImageStatusRequest)(nil),             // 39: protos.UpdateImageStatusRequest
	(*SessionsRequest)(nil),                      // 40: protos.SessionsRequest
	(*SessionsByTagRequest)(nil),                 // 41: protos.SessionsByTagRequest
	(*Id)(nil),                                   // 42: protos.Id
	(*GetSessionByIdRequest)(nil),                // 43: protos.GetSessionByIdRequest
	(*DeleteSessionsByZoomMeetingIdRequest)(nil), // 44: protos.DeleteSessionsByZoomMeetingIdRequest
	(*SubId)(nil),                                // 45: protos.SubId
	(*PaymentPlatformOrderId)(nil),               // 46: protos.PaymentPlatformOrderId
	(*PaymentCard)(nil),                          // 47: protos.PaymentCard
	(*CreateOrderRequest)(nil),                   // 48: protos.CreateOrderRequest
	(*CreateOrderResponse)(nil),                  // 49: protos.CreateOrderResponse
	(*UpdateOrderPaymentMethodIdRequest)(nil),    // 50: protos.UpdateOrderPaymentMethodIdRequest
	(*User)(nil),                                 // 51: protos.User
	(*Users)(nil),                                // 52: protos.Users
	(*Customer)(nil),                             // 53: protos.Customer
	(*Customers)(nil),                            // 54: protos.Customers
	(*PaymentMethodData)(nil),                    // 55: protos.PaymentMethodData
	(*Order)(nil),                                // 56: protos.Order
	(*Orders)(nil),                               // 57: protos.Orders
	(*Session)(nil),                              // 58: protos.Session
	(*Sessions)(nil),                             // 59: protos.Sessions
	(*ZoomToken)(nil),                            // 60: protos.ZoomToken
	(*CreateZoomMeetingFields_Settings)(nil),     // 61: protos.CreateZoomMeetingFields.Settings
}
var file_nemo_proto_depIdxs = []int32{
	21, // 0: protos.CreateMeetingInZoomRequest.fields:type_name -> protos.CreateZoomMeetingFields
	61, // 1: protos.CreateZoomMeetingFields.settings:type_name -> protos.CreateZoomMeetingFields.Settings
	24, // 2: protos.UpdateMeetingInZoomRequest.fields:type_name -> protos.UpdateZoomMeetingFields
	51, // 3: protos.UserProfile.user:type_name -> protos.User
	60, // 4: protos.UserProfile.zoom_token:type_name -> protos.ZoomToken
	4,  // 5: protos.SignedImageUploadUrlRequest.ext:type_name -> protos.SignedImageUploadUrlRequest.Ext
	0,  // 6: protos.Image.status:type_name -> protos.UploadStatus
	37, // 7: protos.Images.images:type_name -> protos.Image
	0,  // 8: protos.UpdateImageStatusRequest.status:type_name -> protos.UploadStatus
	2,  // 9: protos.CreateOrderRequest.transaction_type:type_name -> protos.TransactionType
	48, // 10: protos.CreateOrderResponse.request:type_name -> protos.CreateOrderRequest
	55, // 11: protos.CreateOrderResponse.payment_methods:type_name -> protos.PaymentMethodData
	56, // 12: protos.CreateOrderResponse.order:type_name -> protos.Order
	59, // 13: protos.User.upcoming_sessions:type_name -> protos.Sessions
	59, // 14: protos.User.previous_sessions:type_name -> protos.Sessions
	59, // 15: protos.User.live_sessions:type_name -> protos.Sessions
	59, // 16: protos.User.ordered_upcoming_sessions:type_name -> protos.Sessions
	59, // 17: protos.User.ordered_previous_sessions:type_name -> protos.Sessions
	59, // 18: protos.User.ordered_live_sessions:type_name -> protos.Sessions
	51, // 19: protos.Users.users:type_name -> protos.User
	1,  // 20: protos.Customer.platform:type_name -> protos.PaymentPlatforms
	53, // 21: protos.Customers.customers:type_name -> protos.Customer
	1,  // 22: protos.Order.payment_platform:type_name -> protos.PaymentPlatforms
	5,  // 23: protos.Order.status:type_name -> protos.Order.PaymentPlatformStatus
	2,  // 24: protos.Order.transaction_type:type_name -> protos.TransactionType
	56, // 25: protos.Orders.orders:type_name -> protos.Order
	11, // 26: protos.Session.meeting_url:type_name -> protos.OptionalString
	11, // 27: protos.Session.zoom_password:type_name -> protos.OptionalString
	10, // 28: protos.Session.is_draft:type_name -> protos.OptionalBool
	6,  // 29: protos.Session.paywall_type:type_name -> protos.Session.PaywallType
	3,  // 30: protos.Session.time_zone:type_name -> protos.TimeZone
	12, // 31: protos.Session.zoom_meeting_id:type_name -> protos.OptionalInt64
	11, // 32: protos.Session.zoom_meeting_join_url:type_name -> protos.OptionalString
	11, // 33: protos.Session.zoom_meeting_start_url:type_name -> protos.OptionalString
	7,  // 34: protos.Session.source:type_name -> protos.Session.SourceType
	10, // 35: protos.Session.zoom_sync_enabled:type_name -> protos.OptionalBool
	51, // 36: protos.Session.user:type_name -> protos.User
	58, // 37: protos.Sessions.sessions:type_name -> protos.Session
	42, // 38: protos.Nemo.GetUserById:input_type -> protos.Id
	42, // 39: protos.Nemo.GetUserByIdPublic:input_type -> protos.Id
	42, // 40: protos.Nemo.GetUserByIdPrivate:input_type -> protos.Id
	34, // 41: protos.Nemo.GetUserByEmail:input_type -> protos.Email
	19, // 42: protos.Nemo.GetUserByZoomAccountId:input_type -> protos.ZoomAccountId
	45, // 43: protos.Nemo.GetOrCreateUserBySubId:input_type -> protos.SubId
	42, // 44: protos.Nemo.GetOrderById:input_type -> protos.Id
	51, // 45: protos.Nemo.UpdateUserBySubId:input_type -> protos.User
	51, // 46: protos.Nemo.UpdateUserById:input_type -> protos.User
	42, // 47: protos.Nemo.UpdateUserZoomDeAuthorized:input_type -> protos.Id
	43, // 48: protos.Nemo.GetSessionById:input_type -> protos.GetSessionByIdRequest
	42, // 49: protos.Nemo.GetSessionsByUserId:input_type -> protos.Id
	16, // 50: protos.Nemo.GetSessionByUserIdAndZoomMeetingId:input_type -> protos.GetSessionByUserIdAndZoomMeetingIdRequest
	17, // 51: protos.Nemo.GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId:input_type -> protos.GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest
	18, // 52: protos.Nemo.GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId:input_type -> protos.GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest
	15, // 53: protos.Nemo.GetUpcomingSessionsByUserIdAndDate:input_type -> protos.SessionsByIdAndDateRequest
	15, // 54: protos.Nemo.GetPreviousSessionsByUserIdAndDate:input_type -> protos.SessionsByIdAndDateRequest
	40, // 55: protos.Nemo.GetSessionsByStartDate:input_type -> protos.SessionsRequest
	41, // 56: protos.Nemo.GetSessionsByStartDateAndTag:input_type -> protos.SessionsByTagRequest
	58, // 57: protos.Nemo.CreateSession:input_type -> protos.Session
	58, // 58: protos.Nemo.UpdateSession:input_type -> protos.Session
	43, // 59: protos.Nemo.DeleteSessionById:input_type -> protos.GetSessionByIdRequest
	44, // 60: protos.Nemo.DeleteSessionsByZoomMeetingId:input_type -> protos.DeleteSessionsByZoomMeetingIdRequest
	42, // 61: protos.Nemo.UpdateSessionsNoZoomSyncByUserId:input_type -> protos.Id
	48, // 62: protos.Nemo.CreateOrder:input_type -> protos.CreateOrderRequest
	46, // 63: protos.Nemo.GetOrderByPaymentPlatformOrderId:input_type -> protos.PaymentPlatformOrderId
	56, // 64: protos.Nemo.UpdateOrderStatusByOrderId:input_type -> protos.Order
	42, // 65: protos.Nemo.GetSucceededOrdersByCustomerId:input_type -> protos.Id
	42, // 66: protos.Nemo.GetOrCreateCustomerByUserId:input_type -> protos.Id
	50, // 67: protos.Nemo.UpdateOrderPaymentMethodId:input_type -> protos.UpdateOrderPaymentMethodIdRequest
	33, // 68: protos.Nemo.GetSignedImageUploadUrl:input_type -> protos.SignedImageUploadUrlRequest
	36, // 69: protos.Nemo.CreateImage:input_type -> protos.CreateImageRequest
	39, // 70: protos.Nemo.UpdateImageStatus:input_type -> protos.UpdateImageStatusRequest
	42, // 71: protos.Nemo.GetImagesByUserId:input_type -> protos.Id
	28, // 72: protos.Nemo.GetZoomAppInstallUrl:input_type -> protos.ZoomAppInstallUrlRequest
	42, // 73: protos.Nemo.GetZoomTokenById:input_type -> protos.Id
	42, // 74: protos.Nemo.GetZoomTokenByUserId:input_type -> protos.Id
	60, // 75: protos.Nemo.UpdateZoomTokenById:input_type -> protos.ZoomToken
	42, // 76: protos.Nemo.RefreshZoomToken:input_type -> protos.Id
	60, // 77: protos.Nemo.CreateZoomAccessToken:input_type -> protos.ZoomToken
	31, // 78: protos.Nemo.GetStripeAppInstallUrl:input_type -> protos.StripeAppInstallUrlRequest
	20, // 79: protos.Nemo.CreateMeetingInZoom:input_type -> protos.CreateMeetingInZoomRequest
	22, // 80: protos.Nemo.UpdateMeetingInZoom:input_type -> protos.UpdateMeetingInZoomRequest
	23, // 81: protos.Nemo.DeleteMeetingInZoom:input_type -> protos.DeleteMeetingInZoomRequest
	42, // 82: protos.Nemo.DeleteZoomAccessTokensByUserId:input_type -> protos.Id
	42, // 83: protos.Nemo.SyncUsersZoomMeeting:input_type -> protos.Id
	8,  // 84: protos.Nemo.SyncZoomMeetingIds:input_type -> protos.SyncZoomMeetingIdsRequest
	42, // 85: protos.Nemo.GetUserProfile:input_type -> protos.Id
	13, // 86: protos.Nemo.GetZoomRedirectSuccessUri:input_type -> protos.Empty
	51, // 87: protos.Nemo.GetUserById:output_type -> protos.User
	51, // 88: protos.Nemo.GetUserByIdPublic:output_type -> protos.User
	51, // 89: protos.Nemo.GetUserByIdPrivate:output_type -> protos.User
	51, // 90: protos.Nemo.GetUserByEmail:output_type -> protos.User
	51, // 91: protos.Nemo.GetUserByZoomAccountId:output_type -> protos.User
	51, // 92: protos.Nemo.GetOrCreateUserBySubId:output_type -> protos.User
	56, // 93: protos.Nemo.GetOrderById:output_type -> protos.Order
	51, // 94: protos.Nemo.UpdateUserBySubId:output_type -> protos.User
	51, // 95: protos.Nemo.UpdateUserById:output_type -> protos.User
	13, // 96: protos.Nemo.UpdateUserZoomDeAuthorized:output_type -> protos.Empty
	58, // 97: protos.Nemo.GetSessionById:output_type -> protos.Session
	59, // 98: protos.Nemo.GetSessionsByUserId:output_type -> protos.Sessions
	58, // 99: protos.Nemo.GetSessionByUserIdAndZoomMeetingId:output_type -> protos.Session
	58, // 100: protos.Nemo.GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId:output_type -> protos.Session
	58, // 101: protos.Nemo.GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId:output_type -> protos.Session
	59, // 102: protos.Nemo.GetUpcomingSessionsByUserIdAndDate:output_type -> protos.Sessions
	59, // 103: protos.Nemo.GetPreviousSessionsByUserIdAndDate:output_type -> protos.Sessions
	59, // 104: protos.Nemo.GetSessionsByStartDate:output_type -> protos.Sessions
	59, // 105: protos.Nemo.GetSessionsByStartDateAndTag:output_type -> protos.Sessions
	58, // 106: protos.Nemo.CreateSession:output_type -> protos.Session
	58, // 107: protos.Nemo.UpdateSession:output_type -> protos.Session
	58, // 108: protos.Nemo.DeleteSessionById:output_type -> protos.Session
	13, // 109: protos.Nemo.DeleteSessionsByZoomMeetingId:output_type -> protos.Empty
	13, // 110: protos.Nemo.UpdateSessionsNoZoomSyncByUserId:output_type -> protos.Empty
	49, // 111: protos.Nemo.CreateOrder:output_type -> protos.CreateOrderResponse
	56, // 112: protos.Nemo.GetOrderByPaymentPlatformOrderId:output_type -> protos.Order
	56, // 113: protos.Nemo.UpdateOrderStatusByOrderId:output_type -> protos.Order
	57, // 114: protos.Nemo.GetSucceededOrdersByCustomerId:output_type -> protos.Orders
	53, // 115: protos.Nemo.GetOrCreateCustomerByUserId:output_type -> protos.Customer
	56, // 116: protos.Nemo.UpdateOrderPaymentMethodId:output_type -> protos.Order
	35, // 117: protos.Nemo.GetSignedImageUploadUrl:output_type -> protos.SignedImageUploadUrlResponse
	37, // 118: protos.Nemo.CreateImage:output_type -> protos.Image
	37, // 119: protos.Nemo.UpdateImageStatus:output_type -> protos.Image
	38, // 120: protos.Nemo.GetImagesByUserId:output_type -> protos.Images
	29, // 121: protos.Nemo.GetZoomAppInstallUrl:output_type -> protos.ZoomAppInstallUrlResponse
	60, // 122: protos.Nemo.GetZoomTokenById:output_type -> protos.ZoomToken
	60, // 123: protos.Nemo.GetZoomTokenByUserId:output_type -> protos.ZoomToken
	60, // 124: protos.Nemo.UpdateZoomTokenById:output_type -> protos.ZoomToken
	60, // 125: protos.Nemo.RefreshZoomToken:output_type -> protos.ZoomToken
	60, // 126: protos.Nemo.CreateZoomAccessToken:output_type -> protos.ZoomToken
	32, // 127: protos.Nemo.GetStripeAppInstallUrl:output_type -> protos.StripeAppInstallUrlResponse
	25, // 128: protos.Nemo.CreateMeetingInZoom:output_type -> protos.CreateMeetingInZoomResponse
	26, // 129: protos.Nemo.UpdateMeetingInZoom:output_type -> protos.UpdateMeetingInZoomResponse
	27, // 130: protos.Nemo.DeleteMeetingInZoom:output_type -> protos.DeleteMeetingInZoomResponse
	13, // 131: protos.Nemo.DeleteZoomAccessTokensByUserId:output_type -> protos.Empty
	13, // 132: protos.Nemo.SyncUsersZoomMeeting:output_type -> protos.Empty
	9,  // 133: protos.Nemo.SyncZoomMeetingIds:output_type -> protos.SyncZoomMeetingIdsResponse
	30, // 134: protos.Nemo.GetUserProfile:output_type -> protos.UserProfile
	14, // 135: protos.Nemo.GetZoomRedirectSuccessUri:output_type -> protos.RedirectUri
	87, // [87:136] is the sub-list for method output_type
	38, // [38:87] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_nemo_proto_init() }
func file_nemo_proto_init() {
	if File_nemo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nemo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncZoomMeetingIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncZoomMeetingIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectUri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionsByIdAndDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionByUserIdAndZoomMeetingIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomAccountId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMeetingInZoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateZoomMeetingFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeetingInZoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMeetingInZoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateZoomMeetingFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMeetingInZoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMeetingInZoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMeetingInZoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomAppInstallUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomAppInstallUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeAppInstallUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeAppInstallUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedImageUploadUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Email); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedImageUploadUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Images); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateImageStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionsByTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSessionsByZoomMeetingIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentPlatformOrderId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderPaymentMethodIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethodData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Orders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZoomToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nemo_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateZoomMeetingFields_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nemo_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nemo_proto_goTypes,
		DependencyIndexes: file_nemo_proto_depIdxs,
		EnumInfos:         file_nemo_proto_enumTypes,
		MessageInfos:      file_nemo_proto_msgTypes,
	}.Build()
	File_nemo_proto = out.File
	file_nemo_proto_rawDesc = nil
	file_nemo_proto_goTypes = nil
	file_nemo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NemoClient is the client API for Nemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NemoClient interface {
	// TODO deprecate ById for Private and Public
	GetUserById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	GetUserByIdPublic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	GetUserByIdPrivate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error)
	GetUserByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*User, error)
	GetUserByZoomAccountId(ctx context.Context, in *ZoomAccountId, opts ...grpc.CallOption) (*User, error)
	GetOrCreateUserBySubId(ctx context.Context, in *SubId, opts ...grpc.CallOption) (*User, error)
	GetOrderById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error)
	UpdateUserBySubId(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUserZoomDeAuthorized(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	GetSessionById(ctx context.Context, in *GetSessionByIdRequest, opts ...grpc.CallOption) (*Session, error)
	GetSessionsByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Sessions, error)
	GetSessionByUserIdAndZoomMeetingId(ctx context.Context, in *GetSessionByUserIdAndZoomMeetingIdRequest, opts ...grpc.CallOption) (*Session, error)
	GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId(ctx context.Context, in *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest, opts ...grpc.CallOption) (*Session, error)
	GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId(ctx context.Context, in *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest, opts ...grpc.CallOption) (*Session, error)
	GetUpcomingSessionsByUserIdAndDate(ctx context.Context, in *SessionsByIdAndDateRequest, opts ...grpc.CallOption) (*Sessions, error)
	GetPreviousSessionsByUserIdAndDate(ctx context.Context, in *SessionsByIdAndDateRequest, opts ...grpc.CallOption) (*Sessions, error)
	GetSessionsByStartDate(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*Sessions, error)
	GetSessionsByStartDateAndTag(ctx context.Context, in *SessionsByTagRequest, opts ...grpc.CallOption) (*Sessions, error)
	CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
	DeleteSessionById(ctx context.Context, in *GetSessionByIdRequest, opts ...grpc.CallOption) (*Session, error)
	DeleteSessionsByZoomMeetingId(ctx context.Context, in *DeleteSessionsByZoomMeetingIdRequest, opts ...grpc.CallOption) (*Empty, error)
	UpdateSessionsNoZoomSyncByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	// CreateOrder -> creates an initial order and returns order id, and the payment methods Ids
	//  - The Http-api will accept a session_id and amount and will create/obtain a customer via the json web token
	//  - Using the amount and customer, the backend will create an order,, as well as return the available payment methods
	//  - The front end will use this data to create an order
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrderByPaymentPlatformOrderId(ctx context.Context, in *PaymentPlatformOrderId, opts ...grpc.CallOption) (*Order, error)
	UpdateOrderStatusByOrderId(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	GetSucceededOrdersByCustomerId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Orders, error)
	// The following are called internally by the backend upon order creation
	GetOrCreateCustomerByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Customer, error)
	UpdateOrderPaymentMethodId(ctx context.Context, in *UpdateOrderPaymentMethodIdRequest, opts ...grpc.CallOption) (*Order, error)
	// front end requests signed url from the backend in order to upload images to.
	// this endpoint only returns the url to upload, and does not create any backend records
	GetSignedImageUploadUrl(ctx context.Context, in *SignedImageUploadUrlRequest, opts ...grpc.CallOption) (*SignedImageUploadUrlResponse, error)
	// Once the front end has successfully uploaded an image to the signed url, the front end will
	// send the details of the uploaded image so the backend can store the image record and associate it
	// to the user record in the backend
	CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*Image, error)
	UpdateImageStatus(ctx context.Context, in *UpdateImageStatusRequest, opts ...grpc.CallOption) (*Image, error)
	GetImagesByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Images, error)
	GetZoomAppInstallUrl(ctx context.Context, in *ZoomAppInstallUrlRequest, opts ...grpc.CallOption) (*ZoomAppInstallUrlResponse, error)
	GetZoomTokenById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ZoomToken, error)
	GetZoomTokenByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ZoomToken, error)
	UpdateZoomTokenById(ctx context.Context, in *ZoomToken, opts ...grpc.CallOption) (*ZoomToken, error)
	RefreshZoomToken(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ZoomToken, error)
	CreateZoomAccessToken(ctx context.Context, in *ZoomToken, opts ...grpc.CallOption) (*ZoomToken, error)
	GetStripeAppInstallUrl(ctx context.Context, in *StripeAppInstallUrlRequest, opts ...grpc.CallOption) (*StripeAppInstallUrlResponse, error)
	CreateMeetingInZoom(ctx context.Context, in *CreateMeetingInZoomRequest, opts ...grpc.CallOption) (*CreateMeetingInZoomResponse, error)
	UpdateMeetingInZoom(ctx context.Context, in *UpdateMeetingInZoomRequest, opts ...grpc.CallOption) (*UpdateMeetingInZoomResponse, error)
	DeleteMeetingInZoom(ctx context.Context, in *DeleteMeetingInZoomRequest, opts ...grpc.CallOption) (*DeleteMeetingInZoomResponse, error)
	DeleteZoomAccessTokensByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	SyncUsersZoomMeeting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
	SyncZoomMeetingIds(ctx context.Context, in *SyncZoomMeetingIdsRequest, opts ...grpc.CallOption) (*SyncZoomMeetingIdsResponse, error)
	GetUserProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserProfile, error)
	GetZoomRedirectSuccessUri(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RedirectUri, error)
}

type nemoClient struct {
	cc grpc.ClientConnInterface
}

func NewNemoClient(cc grpc.ClientConnInterface) NemoClient {
	return &nemoClient{cc}
}

func (c *nemoClient) GetUserById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetUserByIdPublic(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetUserByIdPublic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetUserByIdPrivate(ctx context.Context, in *Id, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetUserByIdPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetUserByEmail(ctx context.Context, in *Email, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetUserByZoomAccountId(ctx context.Context, in *ZoomAccountId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetUserByZoomAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetOrCreateUserBySubId(ctx context.Context, in *SubId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetOrCreateUserBySubId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetOrderById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateUserBySubId(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateUserBySubId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateUserById(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateUserZoomDeAuthorized(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateUserZoomDeAuthorized", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSessionById(ctx context.Context, in *GetSessionByIdRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSessionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSessionsByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Sessions, error) {
	out := new(Sessions)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSessionsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSessionByUserIdAndZoomMeetingId(ctx context.Context, in *GetSessionByUserIdAndZoomMeetingIdRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSessionByUserIdAndZoomMeetingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId(ctx context.Context, in *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId(ctx context.Context, in *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetUpcomingSessionsByUserIdAndDate(ctx context.Context, in *SessionsByIdAndDateRequest, opts ...grpc.CallOption) (*Sessions, error) {
	out := new(Sessions)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetUpcomingSessionsByUserIdAndDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetPreviousSessionsByUserIdAndDate(ctx context.Context, in *SessionsByIdAndDateRequest, opts ...grpc.CallOption) (*Sessions, error) {
	out := new(Sessions)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetPreviousSessionsByUserIdAndDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSessionsByStartDate(ctx context.Context, in *SessionsRequest, opts ...grpc.CallOption) (*Sessions, error) {
	out := new(Sessions)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSessionsByStartDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSessionsByStartDateAndTag(ctx context.Context, in *SessionsByTagRequest, opts ...grpc.CallOption) (*Sessions, error) {
	out := new(Sessions)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSessionsByStartDateAndTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) CreateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protos.Nemo/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) DeleteSessionById(ctx context.Context, in *GetSessionByIdRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protos.Nemo/DeleteSessionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) DeleteSessionsByZoomMeetingId(ctx context.Context, in *DeleteSessionsByZoomMeetingIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Nemo/DeleteSessionsByZoomMeetingId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateSessionsNoZoomSyncByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateSessionsNoZoomSyncByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetOrderByPaymentPlatformOrderId(ctx context.Context, in *PaymentPlatformOrderId, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetOrderByPaymentPlatformOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateOrderStatusByOrderId(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateOrderStatusByOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSucceededOrdersByCustomerId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Orders, error) {
	out := new(Orders)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSucceededOrdersByCustomerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetOrCreateCustomerByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetOrCreateCustomerByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateOrderPaymentMethodId(ctx context.Context, in *UpdateOrderPaymentMethodIdRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateOrderPaymentMethodId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetSignedImageUploadUrl(ctx context.Context, in *SignedImageUploadUrlRequest, opts ...grpc.CallOption) (*SignedImageUploadUrlResponse, error) {
	out := new(SignedImageUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetSignedImageUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) CreateImage(ctx context.Context, in *CreateImageRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/protos.Nemo/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateImageStatus(ctx context.Context, in *UpdateImageStatusRequest, opts ...grpc.CallOption) (*Image, error) {
	out := new(Image)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateImageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetImagesByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Images, error) {
	out := new(Images)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetImagesByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetZoomAppInstallUrl(ctx context.Context, in *ZoomAppInstallUrlRequest, opts ...grpc.CallOption) (*ZoomAppInstallUrlResponse, error) {
	out := new(ZoomAppInstallUrlResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetZoomAppInstallUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetZoomTokenById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ZoomToken, error) {
	out := new(ZoomToken)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetZoomTokenById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetZoomTokenByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ZoomToken, error) {
	out := new(ZoomToken)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetZoomTokenByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateZoomTokenById(ctx context.Context, in *ZoomToken, opts ...grpc.CallOption) (*ZoomToken, error) {
	out := new(ZoomToken)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateZoomTokenById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) RefreshZoomToken(ctx context.Context, in *Id, opts ...grpc.CallOption) (*ZoomToken, error) {
	out := new(ZoomToken)
	err := c.cc.Invoke(ctx, "/protos.Nemo/RefreshZoomToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) CreateZoomAccessToken(ctx context.Context, in *ZoomToken, opts ...grpc.CallOption) (*ZoomToken, error) {
	out := new(ZoomToken)
	err := c.cc.Invoke(ctx, "/protos.Nemo/CreateZoomAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetStripeAppInstallUrl(ctx context.Context, in *StripeAppInstallUrlRequest, opts ...grpc.CallOption) (*StripeAppInstallUrlResponse, error) {
	out := new(StripeAppInstallUrlResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetStripeAppInstallUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) CreateMeetingInZoom(ctx context.Context, in *CreateMeetingInZoomRequest, opts ...grpc.CallOption) (*CreateMeetingInZoomResponse, error) {
	out := new(CreateMeetingInZoomResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/CreateMeetingInZoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) UpdateMeetingInZoom(ctx context.Context, in *UpdateMeetingInZoomRequest, opts ...grpc.CallOption) (*UpdateMeetingInZoomResponse, error) {
	out := new(UpdateMeetingInZoomResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/UpdateMeetingInZoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) DeleteMeetingInZoom(ctx context.Context, in *DeleteMeetingInZoomRequest, opts ...grpc.CallOption) (*DeleteMeetingInZoomResponse, error) {
	out := new(DeleteMeetingInZoomResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/DeleteMeetingInZoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) DeleteZoomAccessTokensByUserId(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Nemo/DeleteZoomAccessTokensByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) SyncUsersZoomMeeting(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protos.Nemo/SyncUsersZoomMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) SyncZoomMeetingIds(ctx context.Context, in *SyncZoomMeetingIdsRequest, opts ...grpc.CallOption) (*SyncZoomMeetingIdsResponse, error) {
	out := new(SyncZoomMeetingIdsResponse)
	err := c.cc.Invoke(ctx, "/protos.Nemo/SyncZoomMeetingIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetUserProfile(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nemoClient) GetZoomRedirectSuccessUri(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RedirectUri, error) {
	out := new(RedirectUri)
	err := c.cc.Invoke(ctx, "/protos.Nemo/GetZoomRedirectSuccessUri", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NemoServer is the server API for Nemo service.
type NemoServer interface {
	// TODO deprecate ById for Private and Public
	GetUserById(context.Context, *Id) (*User, error)
	GetUserByIdPublic(context.Context, *Id) (*User, error)
	GetUserByIdPrivate(context.Context, *Id) (*User, error)
	GetUserByEmail(context.Context, *Email) (*User, error)
	GetUserByZoomAccountId(context.Context, *ZoomAccountId) (*User, error)
	GetOrCreateUserBySubId(context.Context, *SubId) (*User, error)
	GetOrderById(context.Context, *Id) (*Order, error)
	UpdateUserBySubId(context.Context, *User) (*User, error)
	UpdateUserById(context.Context, *User) (*User, error)
	UpdateUserZoomDeAuthorized(context.Context, *Id) (*Empty, error)
	GetSessionById(context.Context, *GetSessionByIdRequest) (*Session, error)
	GetSessionsByUserId(context.Context, *Id) (*Sessions, error)
	GetSessionByUserIdAndZoomMeetingId(context.Context, *GetSessionByUserIdAndZoomMeetingIdRequest) (*Session, error)
	GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId(context.Context, *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) (*Session, error)
	GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId(context.Context, *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) (*Session, error)
	GetUpcomingSessionsByUserIdAndDate(context.Context, *SessionsByIdAndDateRequest) (*Sessions, error)
	GetPreviousSessionsByUserIdAndDate(context.Context, *SessionsByIdAndDateRequest) (*Sessions, error)
	GetSessionsByStartDate(context.Context, *SessionsRequest) (*Sessions, error)
	GetSessionsByStartDateAndTag(context.Context, *SessionsByTagRequest) (*Sessions, error)
	CreateSession(context.Context, *Session) (*Session, error)
	UpdateSession(context.Context, *Session) (*Session, error)
	DeleteSessionById(context.Context, *GetSessionByIdRequest) (*Session, error)
	DeleteSessionsByZoomMeetingId(context.Context, *DeleteSessionsByZoomMeetingIdRequest) (*Empty, error)
	UpdateSessionsNoZoomSyncByUserId(context.Context, *Id) (*Empty, error)
	// CreateOrder -> creates an initial order and returns order id, and the payment methods Ids
	//  - The Http-api will accept a session_id and amount and will create/obtain a customer via the json web token
	//  - Using the amount and customer, the backend will create an order,, as well as return the available payment methods
	//  - The front end will use this data to create an order
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrderByPaymentPlatformOrderId(context.Context, *PaymentPlatformOrderId) (*Order, error)
	UpdateOrderStatusByOrderId(context.Context, *Order) (*Order, error)
	GetSucceededOrdersByCustomerId(context.Context, *Id) (*Orders, error)
	// The following are called internally by the backend upon order creation
	GetOrCreateCustomerByUserId(context.Context, *Id) (*Customer, error)
	UpdateOrderPaymentMethodId(context.Context, *UpdateOrderPaymentMethodIdRequest) (*Order, error)
	// front end requests signed url from the backend in order to upload images to.
	// this endpoint only returns the url to upload, and does not create any backend records
	GetSignedImageUploadUrl(context.Context, *SignedImageUploadUrlRequest) (*SignedImageUploadUrlResponse, error)
	// Once the front end has successfully uploaded an image to the signed url, the front end will
	// send the details of the uploaded image so the backend can store the image record and associate it
	// to the user record in the backend
	CreateImage(context.Context, *CreateImageRequest) (*Image, error)
	UpdateImageStatus(context.Context, *UpdateImageStatusRequest) (*Image, error)
	GetImagesByUserId(context.Context, *Id) (*Images, error)
	GetZoomAppInstallUrl(context.Context, *ZoomAppInstallUrlRequest) (*ZoomAppInstallUrlResponse, error)
	GetZoomTokenById(context.Context, *Id) (*ZoomToken, error)
	GetZoomTokenByUserId(context.Context, *Id) (*ZoomToken, error)
	UpdateZoomTokenById(context.Context, *ZoomToken) (*ZoomToken, error)
	RefreshZoomToken(context.Context, *Id) (*ZoomToken, error)
	CreateZoomAccessToken(context.Context, *ZoomToken) (*ZoomToken, error)
	GetStripeAppInstallUrl(context.Context, *StripeAppInstallUrlRequest) (*StripeAppInstallUrlResponse, error)
	CreateMeetingInZoom(context.Context, *CreateMeetingInZoomRequest) (*CreateMeetingInZoomResponse, error)
	UpdateMeetingInZoom(context.Context, *UpdateMeetingInZoomRequest) (*UpdateMeetingInZoomResponse, error)
	DeleteMeetingInZoom(context.Context, *DeleteMeetingInZoomRequest) (*DeleteMeetingInZoomResponse, error)
	DeleteZoomAccessTokensByUserId(context.Context, *Id) (*Empty, error)
	SyncUsersZoomMeeting(context.Context, *Id) (*Empty, error)
	SyncZoomMeetingIds(context.Context, *SyncZoomMeetingIdsRequest) (*SyncZoomMeetingIdsResponse, error)
	GetUserProfile(context.Context, *Id) (*UserProfile, error)
	GetZoomRedirectSuccessUri(context.Context, *Empty) (*RedirectUri, error)
}

// UnimplementedNemoServer can be embedded to have forward compatible implementations.
type UnimplementedNemoServer struct {
}

func (*UnimplementedNemoServer) GetUserById(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (*UnimplementedNemoServer) GetUserByIdPublic(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByIdPublic not implemented")
}
func (*UnimplementedNemoServer) GetUserByIdPrivate(context.Context, *Id) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByIdPrivate not implemented")
}
func (*UnimplementedNemoServer) GetUserByEmail(context.Context, *Email) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (*UnimplementedNemoServer) GetUserByZoomAccountId(context.Context, *ZoomAccountId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByZoomAccountId not implemented")
}
func (*UnimplementedNemoServer) GetOrCreateUserBySubId(context.Context, *SubId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateUserBySubId not implemented")
}
func (*UnimplementedNemoServer) GetOrderById(context.Context, *Id) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderById not implemented")
}
func (*UnimplementedNemoServer) UpdateUserBySubId(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBySubId not implemented")
}
func (*UnimplementedNemoServer) UpdateUserById(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserById not implemented")
}
func (*UnimplementedNemoServer) UpdateUserZoomDeAuthorized(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserZoomDeAuthorized not implemented")
}
func (*UnimplementedNemoServer) GetSessionById(context.Context, *GetSessionByIdRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionById not implemented")
}
func (*UnimplementedNemoServer) GetSessionsByUserId(context.Context, *Id) (*Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionsByUserId not implemented")
}
func (*UnimplementedNemoServer) GetSessionByUserIdAndZoomMeetingId(context.Context, *GetSessionByUserIdAndZoomMeetingIdRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByUserIdAndZoomMeetingId not implemented")
}
func (*UnimplementedNemoServer) GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId(context.Context, *GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId not implemented")
}
func (*UnimplementedNemoServer) GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId(context.Context, *GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId not implemented")
}
func (*UnimplementedNemoServer) GetUpcomingSessionsByUserIdAndDate(context.Context, *SessionsByIdAndDateRequest) (*Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingSessionsByUserIdAndDate not implemented")
}
func (*UnimplementedNemoServer) GetPreviousSessionsByUserIdAndDate(context.Context, *SessionsByIdAndDateRequest) (*Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousSessionsByUserIdAndDate not implemented")
}
func (*UnimplementedNemoServer) GetSessionsByStartDate(context.Context, *SessionsRequest) (*Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionsByStartDate not implemented")
}
func (*UnimplementedNemoServer) GetSessionsByStartDateAndTag(context.Context, *SessionsByTagRequest) (*Sessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionsByStartDateAndTag not implemented")
}
func (*UnimplementedNemoServer) CreateSession(context.Context, *Session) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedNemoServer) UpdateSession(context.Context, *Session) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (*UnimplementedNemoServer) DeleteSessionById(context.Context, *GetSessionByIdRequest) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionById not implemented")
}
func (*UnimplementedNemoServer) DeleteSessionsByZoomMeetingId(context.Context, *DeleteSessionsByZoomMeetingIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionsByZoomMeetingId not implemented")
}
func (*UnimplementedNemoServer) UpdateSessionsNoZoomSyncByUserId(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionsNoZoomSyncByUserId not implemented")
}
func (*UnimplementedNemoServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (*UnimplementedNemoServer) GetOrderByPaymentPlatformOrderId(context.Context, *PaymentPlatformOrderId) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByPaymentPlatformOrderId not implemented")
}
func (*UnimplementedNemoServer) UpdateOrderStatusByOrderId(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatusByOrderId not implemented")
}
func (*UnimplementedNemoServer) GetSucceededOrdersByCustomerId(context.Context, *Id) (*Orders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSucceededOrdersByCustomerId not implemented")
}
func (*UnimplementedNemoServer) GetOrCreateCustomerByUserId(context.Context, *Id) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateCustomerByUserId not implemented")
}
func (*UnimplementedNemoServer) UpdateOrderPaymentMethodId(context.Context, *UpdateOrderPaymentMethodIdRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderPaymentMethodId not implemented")
}
func (*UnimplementedNemoServer) GetSignedImageUploadUrl(context.Context, *SignedImageUploadUrlRequest) (*SignedImageUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedImageUploadUrl not implemented")
}
func (*UnimplementedNemoServer) CreateImage(context.Context, *CreateImageRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (*UnimplementedNemoServer) UpdateImageStatus(context.Context, *UpdateImageStatusRequest) (*Image, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImageStatus not implemented")
}
func (*UnimplementedNemoServer) GetImagesByUserId(context.Context, *Id) (*Images, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImagesByUserId not implemented")
}
func (*UnimplementedNemoServer) GetZoomAppInstallUrl(context.Context, *ZoomAppInstallUrlRequest) (*ZoomAppInstallUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoomAppInstallUrl not implemented")
}
func (*UnimplementedNemoServer) GetZoomTokenById(context.Context, *Id) (*ZoomToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoomTokenById not implemented")
}
func (*UnimplementedNemoServer) GetZoomTokenByUserId(context.Context, *Id) (*ZoomToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoomTokenByUserId not implemented")
}
func (*UnimplementedNemoServer) UpdateZoomTokenById(context.Context, *ZoomToken) (*ZoomToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZoomTokenById not implemented")
}
func (*UnimplementedNemoServer) RefreshZoomToken(context.Context, *Id) (*ZoomToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshZoomToken not implemented")
}
func (*UnimplementedNemoServer) CreateZoomAccessToken(context.Context, *ZoomToken) (*ZoomToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZoomAccessToken not implemented")
}
func (*UnimplementedNemoServer) GetStripeAppInstallUrl(context.Context, *StripeAppInstallUrlRequest) (*StripeAppInstallUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStripeAppInstallUrl not implemented")
}
func (*UnimplementedNemoServer) CreateMeetingInZoom(context.Context, *CreateMeetingInZoomRequest) (*CreateMeetingInZoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeetingInZoom not implemented")
}
func (*UnimplementedNemoServer) UpdateMeetingInZoom(context.Context, *UpdateMeetingInZoomRequest) (*UpdateMeetingInZoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeetingInZoom not implemented")
}
func (*UnimplementedNemoServer) DeleteMeetingInZoom(context.Context, *DeleteMeetingInZoomRequest) (*DeleteMeetingInZoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeetingInZoom not implemented")
}
func (*UnimplementedNemoServer) DeleteZoomAccessTokensByUserId(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZoomAccessTokensByUserId not implemented")
}
func (*UnimplementedNemoServer) SyncUsersZoomMeeting(context.Context, *Id) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUsersZoomMeeting not implemented")
}
func (*UnimplementedNemoServer) SyncZoomMeetingIds(context.Context, *SyncZoomMeetingIdsRequest) (*SyncZoomMeetingIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncZoomMeetingIds not implemented")
}
func (*UnimplementedNemoServer) GetUserProfile(context.Context, *Id) (*UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (*UnimplementedNemoServer) GetZoomRedirectSuccessUri(context.Context, *Empty) (*RedirectUri, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoomRedirectSuccessUri not implemented")
}

func RegisterNemoServer(s *grpc.Server, srv NemoServer) {
	s.RegisterService(&_Nemo_serviceDesc, srv)
}

func _Nemo_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetUserById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetUserByIdPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetUserByIdPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetUserByIdPublic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetUserByIdPublic(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetUserByIdPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetUserByIdPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetUserByIdPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetUserByIdPrivate(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetUserByEmail(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetUserByZoomAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomAccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetUserByZoomAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetUserByZoomAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetUserByZoomAccountId(ctx, req.(*ZoomAccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetOrCreateUserBySubId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetOrCreateUserBySubId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetOrCreateUserBySubId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetOrCreateUserBySubId(ctx, req.(*SubId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetOrderById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateUserBySubId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateUserBySubId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateUserBySubId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateUserBySubId(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateUserById(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateUserZoomDeAuthorized_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateUserZoomDeAuthorized(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateUserZoomDeAuthorized",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateUserZoomDeAuthorized(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSessionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSessionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSessionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSessionById(ctx, req.(*GetSessionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSessionsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSessionsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSessionsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSessionsByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSessionByUserIdAndZoomMeetingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByUserIdAndZoomMeetingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSessionByUserIdAndZoomMeetingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSessionByUserIdAndZoomMeetingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSessionByUserIdAndZoomMeetingId(ctx, req.(*GetSessionByUserIdAndZoomMeetingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId(ctx, req.(*GetSessionByUserIdAndZoomMeetingIdAndRawPayloadIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId(ctx, req.(*GetSessionByUserIdAndZoomMeetingIdAndOccurrenceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetUpcomingSessionsByUserIdAndDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsByIdAndDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetUpcomingSessionsByUserIdAndDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetUpcomingSessionsByUserIdAndDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetUpcomingSessionsByUserIdAndDate(ctx, req.(*SessionsByIdAndDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetPreviousSessionsByUserIdAndDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsByIdAndDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetPreviousSessionsByUserIdAndDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetPreviousSessionsByUserIdAndDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetPreviousSessionsByUserIdAndDate(ctx, req.(*SessionsByIdAndDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSessionsByStartDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSessionsByStartDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSessionsByStartDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSessionsByStartDate(ctx, req.(*SessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSessionsByStartDateAndTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionsByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSessionsByStartDateAndTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSessionsByStartDateAndTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSessionsByStartDateAndTag(ctx, req.(*SessionsByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).CreateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_DeleteSessionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).DeleteSessionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/DeleteSessionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).DeleteSessionById(ctx, req.(*GetSessionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_DeleteSessionsByZoomMeetingId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionsByZoomMeetingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).DeleteSessionsByZoomMeetingId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/DeleteSessionsByZoomMeetingId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).DeleteSessionsByZoomMeetingId(ctx, req.(*DeleteSessionsByZoomMeetingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateSessionsNoZoomSyncByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateSessionsNoZoomSyncByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateSessionsNoZoomSyncByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateSessionsNoZoomSyncByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetOrderByPaymentPlatformOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentPlatformOrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetOrderByPaymentPlatformOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetOrderByPaymentPlatformOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetOrderByPaymentPlatformOrderId(ctx, req.(*PaymentPlatformOrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateOrderStatusByOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateOrderStatusByOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateOrderStatusByOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateOrderStatusByOrderId(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSucceededOrdersByCustomerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSucceededOrdersByCustomerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSucceededOrdersByCustomerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSucceededOrdersByCustomerId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetOrCreateCustomerByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetOrCreateCustomerByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetOrCreateCustomerByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetOrCreateCustomerByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateOrderPaymentMethodId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderPaymentMethodIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateOrderPaymentMethodId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateOrderPaymentMethodId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateOrderPaymentMethodId(ctx, req.(*UpdateOrderPaymentMethodIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetSignedImageUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedImageUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetSignedImageUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetSignedImageUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetSignedImageUploadUrl(ctx, req.(*SignedImageUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).CreateImage(ctx, req.(*CreateImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateImageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateImageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateImageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateImageStatus(ctx, req.(*UpdateImageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetImagesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetImagesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetImagesByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetImagesByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetZoomAppInstallUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomAppInstallUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetZoomAppInstallUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetZoomAppInstallUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetZoomAppInstallUrl(ctx, req.(*ZoomAppInstallUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetZoomTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetZoomTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetZoomTokenById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetZoomTokenById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetZoomTokenByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetZoomTokenByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetZoomTokenByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetZoomTokenByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateZoomTokenById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateZoomTokenById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateZoomTokenById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateZoomTokenById(ctx, req.(*ZoomToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_RefreshZoomToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).RefreshZoomToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/RefreshZoomToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).RefreshZoomToken(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_CreateZoomAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZoomToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).CreateZoomAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/CreateZoomAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).CreateZoomAccessToken(ctx, req.(*ZoomToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetStripeAppInstallUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeAppInstallUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetStripeAppInstallUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetStripeAppInstallUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetStripeAppInstallUrl(ctx, req.(*StripeAppInstallUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_CreateMeetingInZoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingInZoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).CreateMeetingInZoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/CreateMeetingInZoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).CreateMeetingInZoom(ctx, req.(*CreateMeetingInZoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_UpdateMeetingInZoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetingInZoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).UpdateMeetingInZoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/UpdateMeetingInZoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).UpdateMeetingInZoom(ctx, req.(*UpdateMeetingInZoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_DeleteMeetingInZoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMeetingInZoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).DeleteMeetingInZoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/DeleteMeetingInZoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).DeleteMeetingInZoom(ctx, req.(*DeleteMeetingInZoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_DeleteZoomAccessTokensByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).DeleteZoomAccessTokensByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/DeleteZoomAccessTokensByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).DeleteZoomAccessTokensByUserId(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_SyncUsersZoomMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).SyncUsersZoomMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/SyncUsersZoomMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).SyncUsersZoomMeeting(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_SyncZoomMeetingIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncZoomMeetingIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).SyncZoomMeetingIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/SyncZoomMeetingIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).SyncZoomMeetingIds(ctx, req.(*SyncZoomMeetingIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetUserProfile(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nemo_GetZoomRedirectSuccessUri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NemoServer).GetZoomRedirectSuccessUri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Nemo/GetZoomRedirectSuccessUri",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NemoServer).GetZoomRedirectSuccessUri(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nemo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Nemo",
	HandlerType: (*NemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _Nemo_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByIdPublic",
			Handler:    _Nemo_GetUserByIdPublic_Handler,
		},
		{
			MethodName: "GetUserByIdPrivate",
			Handler:    _Nemo_GetUserByIdPrivate_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _Nemo_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUserByZoomAccountId",
			Handler:    _Nemo_GetUserByZoomAccountId_Handler,
		},
		{
			MethodName: "GetOrCreateUserBySubId",
			Handler:    _Nemo_GetOrCreateUserBySubId_Handler,
		},
		{
			MethodName: "GetOrderById",
			Handler:    _Nemo_GetOrderById_Handler,
		},
		{
			MethodName: "UpdateUserBySubId",
			Handler:    _Nemo_UpdateUserBySubId_Handler,
		},
		{
			MethodName: "UpdateUserById",
			Handler:    _Nemo_UpdateUserById_Handler,
		},
		{
			MethodName: "UpdateUserZoomDeAuthorized",
			Handler:    _Nemo_UpdateUserZoomDeAuthorized_Handler,
		},
		{
			MethodName: "GetSessionById",
			Handler:    _Nemo_GetSessionById_Handler,
		},
		{
			MethodName: "GetSessionsByUserId",
			Handler:    _Nemo_GetSessionsByUserId_Handler,
		},
		{
			MethodName: "GetSessionByUserIdAndZoomMeetingId",
			Handler:    _Nemo_GetSessionByUserIdAndZoomMeetingId_Handler,
		},
		{
			MethodName: "GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId",
			Handler:    _Nemo_GetSessionByUserIdAndZoomMeetingIdAndRawPayloadId_Handler,
		},
		{
			MethodName: "GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId",
			Handler:    _Nemo_GetSessionByUserIdAndZoomMeetingIdAndOccurrenceId_Handler,
		},
		{
			MethodName: "GetUpcomingSessionsByUserIdAndDate",
			Handler:    _Nemo_GetUpcomingSessionsByUserIdAndDate_Handler,
		},
		{
			MethodName: "GetPreviousSessionsByUserIdAndDate",
			Handler:    _Nemo_GetPreviousSessionsByUserIdAndDate_Handler,
		},
		{
			MethodName: "GetSessionsByStartDate",
			Handler:    _Nemo_GetSessionsByStartDate_Handler,
		},
		{
			MethodName: "GetSessionsByStartDateAndTag",
			Handler:    _Nemo_GetSessionsByStartDateAndTag_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _Nemo_CreateSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _Nemo_UpdateSession_Handler,
		},
		{
			MethodName: "DeleteSessionById",
			Handler:    _Nemo_DeleteSessionById_Handler,
		},
		{
			MethodName: "DeleteSessionsByZoomMeetingId",
			Handler:    _Nemo_DeleteSessionsByZoomMeetingId_Handler,
		},
		{
			MethodName: "UpdateSessionsNoZoomSyncByUserId",
			Handler:    _Nemo_UpdateSessionsNoZoomSyncByUserId_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Nemo_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderByPaymentPlatformOrderId",
			Handler:    _Nemo_GetOrderByPaymentPlatformOrderId_Handler,
		},
		{
			MethodName: "UpdateOrderStatusByOrderId",
			Handler:    _Nemo_UpdateOrderStatusByOrderId_Handler,
		},
		{
			MethodName: "GetSucceededOrdersByCustomerId",
			Handler:    _Nemo_GetSucceededOrdersByCustomerId_Handler,
		},
		{
			MethodName: "GetOrCreateCustomerByUserId",
			Handler:    _Nemo_GetOrCreateCustomerByUserId_Handler,
		},
		{
			MethodName: "UpdateOrderPaymentMethodId",
			Handler:    _Nemo_UpdateOrderPaymentMethodId_Handler,
		},
		{
			MethodName: "GetSignedImageUploadUrl",
			Handler:    _Nemo_GetSignedImageUploadUrl_Handler,
		},
		{
			MethodName: "CreateImage",
			Handler:    _Nemo_CreateImage_Handler,
		},
		{
			MethodName: "UpdateImageStatus",
			Handler:    _Nemo_UpdateImageStatus_Handler,
		},
		{
			MethodName: "GetImagesByUserId",
			Handler:    _Nemo_GetImagesByUserId_Handler,
		},
		{
			MethodName: "GetZoomAppInstallUrl",
			Handler:    _Nemo_GetZoomAppInstallUrl_Handler,
		},
		{
			MethodName: "GetZoomTokenById",
			Handler:    _Nemo_GetZoomTokenById_Handler,
		},
		{
			MethodName: "GetZoomTokenByUserId",
			Handler:    _Nemo_GetZoomTokenByUserId_Handler,
		},
		{
			MethodName: "UpdateZoomTokenById",
			Handler:    _Nemo_UpdateZoomTokenById_Handler,
		},
		{
			MethodName: "RefreshZoomToken",
			Handler:    _Nemo_RefreshZoomToken_Handler,
		},
		{
			MethodName: "CreateZoomAccessToken",
			Handler:    _Nemo_CreateZoomAccessToken_Handler,
		},
		{
			MethodName: "GetStripeAppInstallUrl",
			Handler:    _Nemo_GetStripeAppInstallUrl_Handler,
		},
		{
			MethodName: "CreateMeetingInZoom",
			Handler:    _Nemo_CreateMeetingInZoom_Handler,
		},
		{
			MethodName: "UpdateMeetingInZoom",
			Handler:    _Nemo_UpdateMeetingInZoom_Handler,
		},
		{
			MethodName: "DeleteMeetingInZoom",
			Handler:    _Nemo_DeleteMeetingInZoom_Handler,
		},
		{
			MethodName: "DeleteZoomAccessTokensByUserId",
			Handler:    _Nemo_DeleteZoomAccessTokensByUserId_Handler,
		},
		{
			MethodName: "SyncUsersZoomMeeting",
			Handler:    _Nemo_SyncUsersZoomMeeting_Handler,
		},
		{
			MethodName: "SyncZoomMeetingIds",
			Handler:    _Nemo_SyncZoomMeetingIds_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _Nemo_GetUserProfile_Handler,
		},
		{
			MethodName: "GetZoomRedirectSuccessUri",
			Handler:    _Nemo_GetZoomRedirectSuccessUri_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nemo.proto",
}
